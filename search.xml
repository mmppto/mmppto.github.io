<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>图论</title>
      <link href="/2023/07/25/Algorithm/"/>
      <url>/2023/07/25/Algorithm/</url>
      
        <content type="html"><![CDATA[<h2 id="最短路问题"><a href="#最短路问题" class="headerlink" title="最短路问题"></a>最短路问题</h2><p><img src="https://cdn.acwing.com/media/article/image/2022/08/03/200210_914f4a5512-%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2022-08-03-112049.png" alt="屏幕截图 2022-08-03 112049.png"></p><hr><blockquote><p>补充：点数n，边数m<br>当m&#x3D;n时，为稀疏图，用邻接表存储<br>当m&#x3D;n^2时，为稠密图，用邻接矩阵存储</p></blockquote><hr><h3 id="朴素的Dijkstra算法"><a href="#朴素的Dijkstra算法" class="headerlink" title="朴素的Dijkstra算法"></a>朴素的Dijkstra算法</h3><hr><p><strong>算法思路：</strong></p><ul><li><strong>注意状态不要忘记更新</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">点数：n   边数：m</span><br><span class="line">1. 初始化除起点之外的其他点到起点距离为正无穷，起点到起点距离为0。且无任何点被确定为最小距离</span><br><span class="line">2. 进行n次迭代，每次迭代选择未被确认最小距离的点中距离起点距离最小的那个点</span><br><span class="line">3. 使用得到的那个点更新所有距离</span><br><span class="line">4. 将此点标记为已经确定最小距离的点</span><br><span class="line">5. 进行下一次迭代</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n, m;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">510</span>, max = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="comment">// grid[i][j]存储从点i到点j的距离</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[][] grid = <span class="keyword">new</span> <span class="title class_">int</span>[N][N];</span><br><span class="line">    <span class="comment">// dist[i]存储i到点1的距离</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] dist = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="comment">// 判断此点是否已经成为最小路径</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span>[] tag = <span class="keyword">new</span> <span class="title class_">boolean</span>[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line">        m = sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            Arrays.fill(grid[i], max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> x, y, z;</span><br><span class="line">        <span class="keyword">while</span> (m-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            x = sc.nextInt();</span><br><span class="line">            y = sc.nextInt();</span><br><span class="line">            z = sc.nextInt();</span><br><span class="line">            <span class="comment">// 因为求最短距离，即使有重边，选择最短的那条即可</span></span><br><span class="line">            grid[x][y] = Math.min(grid[x][y], z);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.print(dijkstra());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">dijkstra</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化数组dist，除了dist[1]距离为0，其余皆为正无穷（很大的数）</span></span><br><span class="line">        Arrays.fill(dist, max);</span><br><span class="line">        dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// n次迭代</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 寻找未被确定最短路径的距离中，最小的那个</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!tag[j] &amp;&amp; (t == -<span class="number">1</span> || dist[j] &lt; dist[t])) &#123;</span><br><span class="line">                    t = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            tag[t] = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 使用找出的最小距离，更新其他所有点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                dist[j] = Math.min(dist[j], dist[t] + grid[t][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1无法到达此点</span></span><br><span class="line">        <span class="keyword">if</span> (dist[n] == max) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> dist[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆优化Dijkstra算法"><a href="#堆优化Dijkstra算法" class="headerlink" title="堆优化Dijkstra算法"></a>堆优化Dijkstra算法</h3><hr><p><strong>Java集合中的优先队列：<code>Queue&lt;&gt; heap = new PriortyQueue&lt;&gt;(排列顺序)</code></strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">150010</span>, max = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="comment">// m=n时，用邻接表存储</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] h = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] e = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] ne = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="comment">// 记录两个点之间距离（权重）</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] w = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="comment">// 记录距离</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] dist = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n,m,idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span>[] tag = <span class="keyword">new</span> <span class="title class_">boolean</span>[N];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line">        m = sc.nextInt();</span><br><span class="line">        <span class="type">int</span> x, y, z;</span><br><span class="line">        Arrays.fill(h, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (m-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            x = sc.nextInt();</span><br><span class="line">            y = sc.nextInt();</span><br><span class="line">            z = sc.nextInt();</span><br><span class="line">            add(x, y, z);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(dijkstra());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> &#123;</span><br><span class="line">        e[idx] = y;</span><br><span class="line">        w[idx] = z;</span><br><span class="line">        ne[idx] = h[x];</span><br><span class="line">        h[x] = idx++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">dijkstra</span><span class="params">()</span> &#123;</span><br><span class="line">        Arrays.fill(dist, max);</span><br><span class="line">        dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 堆在java集合中为优先队列  &#123;i，j&#125;i为距离，j为编号  按照距离从小到大排，构成小根堆</span></span><br><span class="line">        Queue&lt;<span class="type">int</span>[]&gt; heap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((o1, o2) -&gt; o1[<span class="number">0</span>] - o2[<span class="number">0</span>]);</span><br><span class="line">        heap.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, <span class="number">1</span>&#125;);</span><br><span class="line">        <span class="keyword">while</span> (!heap.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span>[] tmp = heap.poll();</span><br><span class="line">            <span class="type">int</span> <span class="variable">distance</span> <span class="operator">=</span> tmp[<span class="number">0</span>], k = tmp[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (tag[k]) <span class="keyword">continue</span>;</span><br><span class="line">            tag[k] = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 更新和此点相关联的点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> h[k]; i != -<span class="number">1</span>; i = ne[i]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> e[i];</span><br><span class="line">                <span class="keyword">if</span> (dist[j] &gt; distance + w[i]) &#123;</span><br><span class="line">                    dist[j] = distance + w[i];</span><br><span class="line">                    <span class="comment">// 更新完后重新入堆</span></span><br><span class="line">                    heap.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;dist[j], j&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dist[n] == max) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> dist[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Bellman-ford算法"><a href="#Bellman-ford算法" class="headerlink" title="Bellman-ford算法"></a>Bellman-ford算法</h3><hr><p><strong>适用于解决单源最短路问题中边权存在负值的情况，且bellman-ford算法保证求出的最短路是在走过的边数不超过一定值的情况</strong></p><hr><p><strong>基本思路：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 初始化dist数组中除1以外的距离为正无穷，1到1的距离为0</span><br><span class="line">2. 进行k次迭代</span><br><span class="line">3. 优先对dist数组作备份，记录上一轮的dist数组</span><br><span class="line">4. 遍历每条边，将距离全部更新</span><br><span class="line">5. 继续k次迭代过程</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义类，作为结构体使用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="type">int</span> a, b, w;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法初始化类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Edge</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> w)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">        <span class="built_in">this</span>.b = b;</span><br><span class="line">        <span class="built_in">this</span>.w = w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">510</span>, M = <span class="number">10010</span>, max = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n, m, k;</span><br><span class="line">    <span class="comment">// 存储每个点到源点1的距离</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] dist = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="comment">// 作为备份数组</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] backcup = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="comment">// 创建边的对象</span></span><br><span class="line">    <span class="keyword">static</span> Edge[] edges = <span class="keyword">new</span> <span class="title class_">Edge</span>[M];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line">        m = sc.nextInt();</span><br><span class="line">        k = sc.nextInt();</span><br><span class="line">        <span class="type">int</span> a, b, w;</span><br><span class="line">        <span class="comment">// 初始化边类</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            a = sc.nextInt();</span><br><span class="line">            b = sc.nextInt();</span><br><span class="line">            w = sc.nextInt();</span><br><span class="line">            edges[i] = <span class="keyword">new</span> <span class="title class_">Edge</span>(a, b, w);</span><br><span class="line">        &#125;</span><br><span class="line">        bellman_ford();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bellman_ford</span><span class="params">()</span> &#123;</span><br><span class="line">        Arrays.fill(dist, max);</span><br><span class="line">        dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 因为走过的边不超过k，所以进行k次迭代</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="comment">// 为了防止串联导致的错误情况，需要先备份数组</span></span><br><span class="line">            backcup = Arrays.copyOf(dist, n + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 遍历每一条边</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> edges[j].a;</span><br><span class="line">                <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> edges[j].b;</span><br><span class="line">                <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> edges[j].w;</span><br><span class="line">                <span class="comment">// 松弛操作</span></span><br><span class="line">                dist[b] = Math.min(dist[b], backcup[a] + w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// max/2原因为：即使没有从1-n的路，但是仍会有节点的负边权更新dist[n]，导致dist[n]值变小一点</span></span><br><span class="line">        <span class="keyword">if</span> (dist[n] &gt; max / <span class="number">2</span>) System.out.print(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.print(dist[n]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="SPFA算法"><a href="#SPFA算法" class="headerlink" title="SPFA算法"></a>SPFA算法</h3><hr><p><strong>适用于单源最短路问题中存在负边权的情况（边权全为正时也可以使用，效率高于Dijkstra算法），但不能保证经过的边数小于一定值，且此算法在图中存在负环时无法使用</strong></p><hr><p><strong>基本思路：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 初始化dist数组，除了1之外的其他点距离为正无穷，1到1的点距离为0</span><br><span class="line">2. 定义一个队列，存储距离发生改变的点的编号，并将编号1的点入队</span><br><span class="line">3. 当队列不空时，弹出队头编号，改变此点状态</span><br><span class="line">4. 遍历此队头连接到的其他点，如果其他的点距离发生改变且不在队中，则此点入队，改变状态</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">100010</span>, max = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n, m;</span><br><span class="line">    <span class="comment">// n=m 稀疏图 邻接表</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] h = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] e = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] ne = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] w = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="comment">// 记录距离</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] dist = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="comment">// 判断节点是否在队列中</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span>[] tag = <span class="keyword">new</span> <span class="title class_">boolean</span>[N];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line">        m = sc.nextInt();</span><br><span class="line">        <span class="type">int</span> x, y, z;</span><br><span class="line">        Arrays.fill(h, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (m-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            x = sc.nextInt();</span><br><span class="line">            y = sc.nextInt();</span><br><span class="line">            z = sc.nextInt();</span><br><span class="line">            add(x, y, z);</span><br><span class="line">        &#125;</span><br><span class="line">        SPFA();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> &#123;</span><br><span class="line">        e[idx] = y;</span><br><span class="line">        w[idx] = z;</span><br><span class="line">        ne[idx] = h[x];</span><br><span class="line">        h[x] = idx++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">SPFA</span><span class="params">()</span> &#123;</span><br><span class="line">        Arrays.fill(dist, max);</span><br><span class="line">        dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 队列存储距离发生改变的节点的编号</span></span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        q.offer(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> q.poll();</span><br><span class="line">            tag[k] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> h[k]; i != -<span class="number">1</span>; i = ne[i]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> e[i];</span><br><span class="line">                <span class="comment">// 如果距离发生改变</span></span><br><span class="line">                <span class="keyword">if</span> (dist[j] &gt; dist[k] + w[i]) &#123;</span><br><span class="line">                    dist[j] = dist[k] + w[i];</span><br><span class="line">                    <span class="comment">// 如果编号未在队列中</span></span><br><span class="line">                    <span class="keyword">if</span> (!tag[j]) &#123;</span><br><span class="line">                        q.offer(j);</span><br><span class="line">                        tag[j] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dist[n] == max) System.out.print(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.print(dist[n]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="SPFA判断负环（负权回路）"><a href="#SPFA判断负环（负权回路）" class="headerlink" title="SPFA判断负环（负权回路）"></a>SPFA判断负环（负权回路）</h3><hr><p><strong>基本思路：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 创建队列，将所有点入队，并改变其状态</span><br><span class="line">2. 进入循环，若队列不空，弹出队首，改变状态</span><br><span class="line">3. 遍历弹出的队首所连接的点，如果这些点距离改变，更新距离，并且更新从起点到此点经过的的边数</span><br><span class="line">4. 若边数&gt;=点数，则出现负环</span><br><span class="line">5. 若所连接的点不在队中，入队并改变状态</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">100010</span>, max = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n, m;</span><br><span class="line">    <span class="comment">// n=m 稀疏图 邻接表</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] h = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] e = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] ne = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] w = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="comment">// 记录距离</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] dist = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="comment">// 判断节点是否在队列中</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span>[] tag = <span class="keyword">new</span> <span class="title class_">boolean</span>[N];</span><br><span class="line">    <span class="comment">// 记录从起点（不一定是1）走到这个点一共经过多少条边</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line">        m = sc.nextInt();</span><br><span class="line">        <span class="type">int</span> x, y, z;</span><br><span class="line">        Arrays.fill(h, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (m-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            x = sc.nextInt();</span><br><span class="line">            y = sc.nextInt();</span><br><span class="line">            z = sc.nextInt();</span><br><span class="line">            add(x, y, z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (SPFA()) System.out.print(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.print(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> &#123;</span><br><span class="line">        e[idx] = y;</span><br><span class="line">        w[idx] = z;</span><br><span class="line">        ne[idx] = h[x];</span><br><span class="line">        h[x] = idx++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">SPFA</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        Arrays.fill(dist, max);</span></span><br><span class="line"><span class="comment">//        dist[1] = 0;</span></span><br><span class="line">        <span class="comment">// 队列存储距离发生改变的节点的编号</span></span><br><span class="line">        <span class="comment">// 因为环的起点不一定是1，所以将所有点都放入队列中</span></span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            q.offer(i);</span><br><span class="line">            tag[i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> q.poll();</span><br><span class="line">            tag[k] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> h[k]; i != -<span class="number">1</span>; i = ne[i]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> e[i];</span><br><span class="line">                <span class="comment">// 如果距离发生改变</span></span><br><span class="line">                <span class="keyword">if</span> (dist[j] &gt; dist[k] + w[i]) &#123;</span><br><span class="line">                    dist[j] = dist[k] + w[i];</span><br><span class="line">                    <span class="comment">// 起点到j的边数更新为起点到k的边数再加一</span></span><br><span class="line">                    cnt[j] = cnt[k] + <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">// n条边代表经过n+1个点，则必有点重复走，所以必有环</span></span><br><span class="line">                    <span class="comment">// 又因为这是最短路问题，如果是正环，不会去走，所以只能为负环</span></span><br><span class="line">                    <span class="keyword">if</span> (cnt[j] &gt;= n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="comment">// 如果编号未在队列中</span></span><br><span class="line">                    <span class="keyword">if</span> (!tag[j]) &#123;</span><br><span class="line">                        q.offer(j);</span><br><span class="line">                        tag[j] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h3><hr><p><strong>适用于多源汇最短路问题：存在负权回路时不可使用，该算法时间复杂度O(n^3)</strong></p><hr><p><strong>基本思路：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 三层循环迭代结束</span><br></pre></td></tr></table></figure><hr><p><strong>注意事项：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 初始化grid数组时先将其中元素填充为max</span><br><span class="line">2. max / 2时不存在通路</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">210</span>, max = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n, m, q;</span><br><span class="line">    <span class="comment">// m==n^2 邻接矩阵存储点到点距离</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[][] dist = <span class="keyword">new</span> <span class="title class_">int</span>[N][N];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line">        m = sc.nextInt();</span><br><span class="line">        q = sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == j) dist[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> dist[i][j] = max;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> a, b, w;</span><br><span class="line">        <span class="keyword">while</span> (m-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            a = sc.nextInt();</span><br><span class="line">            b = sc.nextInt();</span><br><span class="line">            w = sc.nextInt();</span><br><span class="line">            <span class="comment">// 因为是最短路，所以选取最短边权</span></span><br><span class="line">            dist[a][b] = Math.min(dist[a][b], w);</span><br><span class="line">        &#125;</span><br><span class="line">        floyd();</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        <span class="keyword">while</span> (q-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            x = sc.nextInt();</span><br><span class="line">            y = sc.nextInt();</span><br><span class="line">            <span class="comment">// 实际上两个点之间没有通路，但可能会有负权边更新了dist[x][y]，使数据变小，所以&gt;max/2即可</span></span><br><span class="line">            <span class="keyword">if</span> (dist[x][y] &gt; max / <span class="number">2</span>) System.out.println(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> System.out.println(dist[x][y]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">floyd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= n; k++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                    dist[i][j] = Math.min(dist[i][j], dist[i][k] + dist[k][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>first</title>
      <link href="/2023/07/25/first/"/>
      <url>/2023/07/25/first/</url>
      
        <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">12</span>, M = <span class="number">1</span> &lt;&lt; N;</span><br><span class="line">        <span class="type">long</span>[][] f = <span class="keyword">new</span> <span class="title class_">long</span>[N][M];</span><br><span class="line">        <span class="comment">// 记录每种排列方式是否符合条件</span></span><br><span class="line">        <span class="comment">// 要求是每一组连续空白的格子数目要为偶数</span></span><br><span class="line">        <span class="type">boolean</span>[] st = <span class="keyword">new</span> <span class="title class_">boolean</span>[M];</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span> &amp;&amp; m != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 先将上一次的结果清零</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) Arrays.fill(f[i], <span class="number">0</span>);</span><br><span class="line">            <span class="comment">// 预处理每一种排列方式是否符合条件</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i++) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">is_valid</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                    <span class="comment">// 碰到当前位置有格子则检查此时的数目是否为偶数</span></span><br><span class="line">                    <span class="comment">// 计算结束后cnt清零，进行下一组连续空白格子数目的计算</span></span><br><span class="line">                    <span class="keyword">if</span> ((i &gt;&gt; j &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> ((cnt &amp; <span class="number">1</span>) == <span class="number">1</span>) is_valid = <span class="literal">false</span>;</span><br><span class="line">                        cnt = <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 最后一组连续空白格子的判断</span></span><br><span class="line">                <span class="keyword">if</span> ((cnt &amp; <span class="number">1</span>) == <span class="number">1</span>) is_valid = <span class="literal">false</span>;</span><br><span class="line">                st[i] = is_valid;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 第i列的合法范围是0 - m-1</span></span><br><span class="line">            <span class="comment">// 第0列因为放不了横着的1*2方块，所以当前方案数为1</span></span><br><span class="line">            f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; (<span class="number">1</span> &lt;&lt; n); j++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; (<span class="number">1</span> &lt;&lt; n); k++) &#123;</span><br><span class="line">                        <span class="comment">// i-2列突出到i-1列的格子与i-1列突出到i列的格子不冲突</span></span><br><span class="line">                        <span class="comment">// 且当前排列方式符合条件</span></span><br><span class="line">                        <span class="keyword">if</span> (((j &amp; k) == <span class="number">0</span>) &amp;&amp; st[j | k])</span><br><span class="line">                            f[i][j] += f[i - <span class="number">1</span>][k];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// f[m][0]代表第m-1列到第m列没有突出的格子的横着摆放的方案数</span></span><br><span class="line">            System.out.println(f[m][<span class="number">0</span>]);</span><br><span class="line">            n = sc.nextInt();</span><br><span class="line">            m = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="disbc"><a href="#disbc" class="headerlink" title="disbc"></a>disbc</h3><h4 id="ascbi"><a href="#ascbi" class="headerlink" title="ascbi"></a>ascbi</h4><h2 id="cdb"><a href="#cdb" class="headerlink" title="cdb"></a>cdb</h2><h3 id="dcsdc"><a href="#dcsdc" class="headerlink" title="dcsdc"></a>dcsdc</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/07/25/hello-world/"/>
      <url>/2023/07/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
