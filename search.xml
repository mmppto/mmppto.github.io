<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>并查集</title>
      <link href="/2023/11/17/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2023/11/17/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="并查集（Union-Find）"><a href="#并查集（Union-Find）" class="headerlink" title="并查集（Union-Find）"></a>并查集（Union-Find）</h1><p><strong>参考题解：</strong><a href="https://lfool.github.io/LFool-Notes/algorithm/%E5%B9%B6%E6%9F%A5%E9%9B%86-Union-Find.html">并查集（Union-Find）</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 并查集</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Unoin_Find</span>:</span><br><span class="line">    count = <span class="number">0</span>  <span class="comment"># 记录连通分量的个数</span></span><br><span class="line">    parent = []  <span class="comment"># 存储当前点所在的连通分量</span></span><br><span class="line">    size = []  <span class="comment"># 存储连通分量中的节点个数（只有根节点的 size 能存储）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n</span>):</span><br><span class="line">        parent = [<span class="number">0</span>] * n</span><br><span class="line">        size = [<span class="number">0</span>] * n</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            parent[i] = i</span><br><span class="line">            size[i] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 找到当前节点根节点</span></span><br><span class="line">    <span class="comment"># 路径压缩</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">self, x</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> self.parent[x] != x:</span><br><span class="line">            self.parent[x] = self.find(self.parent[x])</span><br><span class="line">        <span class="keyword">return</span> self.parent[x]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将 p，q 连接到一个分量中</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">union</span>(<span class="params">self, p, q</span>):</span><br><span class="line">        root_p = self.find(p)</span><br><span class="line">        root_q = self.find(q)</span><br><span class="line">        <span class="keyword">if</span> root_p == root_q:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 平衡性优化</span></span><br><span class="line">        <span class="keyword">if</span> self.size[root_p] &gt; self.size[root_q]:</span><br><span class="line">            self.size[root_p] += self.size[root_q]</span><br><span class="line">            self.parent[root_q] = root_p</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.size[root_q] += self.size[root_p]</span><br><span class="line">            self.parent[root_p] = root_q</span><br><span class="line">        self.count -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断 p，q 是否在同一分量</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">connected</span>(<span class="params">self, p, q</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">return</span> self.find(p) == self.find(q)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回连通分量个数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">count</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> self.count</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索算法（DFS/回溯/BFS）</title>
      <link href="/2023/11/08/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%20(DFS%20%E5%9B%9E%E6%BA%AF%20BFS)/"/>
      <url>/2023/11/08/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%20(DFS%20%E5%9B%9E%E6%BA%AF%20BFS)/</url>
      
        <content type="html"><![CDATA[<h1 id="搜索算法-DFS-回溯-BFS"><a href="#搜索算法-DFS-回溯-BFS" class="headerlink" title="搜索算法 (DFS&#x2F;回溯&#x2F;BFS)"></a>搜索算法 (DFS&#x2F;回溯&#x2F;BFS)</h1><h2 id="回溯-DFS-算法框架"><a href="#回溯-DFS-算法框架" class="headerlink" title="回溯 (DFS) 算法框架"></a>回溯 (DFS) 算法框架</h2><p><strong>回溯三部曲：</strong></p><ul><li>函数返回值及参数</li><li>函数终止条件</li><li>函数遍历过程</li></ul><p><strong>基本框架：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">参数</span>):</span><br><span class="line">    <span class="keyword">if</span> 满足终止条件:</span><br><span class="line">        存放结果</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> 选择 <span class="keyword">in</span> 本层集合中元素（树中节点孩子的数量就是集合的大小）:</span><br><span class="line">        处理节点</span><br><span class="line">        backtrack(路径，选择列表)  <span class="comment"># 递归</span></span><br><span class="line">        回溯，撤销处理结果</span><br></pre></td></tr></table></figure><h2 id="排列-组合-子集-问题"><a href="#排列-组合-子集-问题" class="headerlink" title="排列 &#x2F; 组合 &#x2F; 子集 问题"></a>排列 &#x2F; 组合 &#x2F; 子集 问题</h2><p><strong>回溯树：</strong></p><img src="https://cdn.jsdelivr.net/gh/mmppto/PicGo-demo/blog-image/image-20231108155610299.png" alt="image-20231108155610299" style="zoom: 50%;" /><h3 id="元素无重复不可复选"><a href="#元素无重复不可复选" class="headerlink" title="元素无重复不可复选"></a>元素无重复不可复选</h3><p>这种情况是最常见的</p><h4 id="子集"><a href="#子集" class="headerlink" title="子集"></a>子集</h4><p><strong>题目可见：</strong></p><p><a href="https://leetcode.cn/problems/subsets/description/">子集</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">subsets</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        res = []  <span class="comment"># 存储结果集</span></span><br><span class="line">        path = []  <span class="comment"># 存储路径上的结果</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">nums, startIndex</span>):</span><br><span class="line">            res.append(path[:])  <span class="comment"># 直接放入路径上的结果</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> startIndex == <span class="built_in">len</span>(nums):</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startIndex, <span class="built_in">len</span>(nums)):</span><br><span class="line">                path.append(nums[i])</span><br><span class="line">                backtrack(nums, i + <span class="number">1</span>)</span><br><span class="line">                path.pop()</span><br><span class="line"></span><br><span class="line">        backtrack(nums, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 观察子集树可以更清晰的理解遍历过程</span></span><br></pre></td></tr></table></figure><h4 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h4><p>组合和子集几乎完全一样，要求得到有两个数的组合其实就是子集树第二层的情况，代码稍微修改即可</p><p><strong>题目可见：</strong></p><p><a href="https://leetcode.cn/problems/combinations/description/">组合</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combine</span>(<span class="params">self, n: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        res = []</span><br><span class="line">        path = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">startIndex, n, k</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(path) == k:</span><br><span class="line">                res.append(path[:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            endIndex = n - (k - <span class="built_in">len</span>(path)) + <span class="number">1</span>  <span class="comment"># 剪枝</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startIndex, endIndex + <span class="number">1</span>):</span><br><span class="line">                path.append(i)</span><br><span class="line">                backtrack(i + <span class="number">1</span>, n, k)</span><br><span class="line">                path.pop()</span><br><span class="line"></span><br><span class="line">        backtrack(<span class="number">1</span>, n, k)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/combination-sum-iii/description/">组合总和|||</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combinationSum3</span>(<span class="params">self, k: <span class="built_in">int</span>, n: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        res = []</span><br><span class="line">        path = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">n, k, startIndex</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">sum</span>(path) &gt; n:  <span class="comment"># 剪枝</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(path) == k <span class="keyword">and</span> <span class="built_in">sum</span>(path) == n:</span><br><span class="line">                res.append(path[:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            endIndex = <span class="number">9</span> - (k - <span class="built_in">len</span>(path)) + <span class="number">1</span>  <span class="comment"># 根据必须要有k个数剪枝</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startIndex, endIndex + <span class="number">1</span>):</span><br><span class="line">                path.append(i)</span><br><span class="line">                backtrack(n, k, i + <span class="number">1</span>)</span><br><span class="line">                path.pop()</span><br><span class="line"></span><br><span class="line">        backtrack(n, k, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h4 id="排列"><a href="#排列" class="headerlink" title="排列"></a>排列</h4><p>未剪枝的树如下</p><p><img src="https://cdn.jsdelivr.net/gh/mmppto/PicGo-demo/blog-image/image-20231108162204046.png" alt="image-20231108162204046"></p><p>观察可知红色部分不符合的原因是一个元素被使用多次，所以引入<code>used[]</code>数组记录每个元素是否被使用过，若已经被使用过则直接跳过</p><p><strong>题目可见：</strong></p><p><a href="https://leetcode.cn/problems/permutations/description/">全排列</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">permute</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        res = []</span><br><span class="line">        path = []</span><br><span class="line">        used = [<span class="literal">False</span>] * <span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">nums, used</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(path) == <span class="built_in">len</span>(nums):</span><br><span class="line">                res.append(path[:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> used[i]:</span><br><span class="line">                    path.append(nums[i])</span><br><span class="line">                    used[i] = <span class="literal">True</span></span><br><span class="line">                    backtrack(nums, used)</span><br><span class="line">                    path.pop()</span><br><span class="line">                    used[i] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        backtrack(nums, used)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="元素可重复不可复选"><a href="#元素可重复不可复选" class="headerlink" title="元素可重复不可复选"></a>元素可重复不可复选</h3><p>这种情况大多数需要先排序处理，让相同的元素相邻</p><h4 id="子集-1"><a href="#子集-1" class="headerlink" title="子集"></a>子集</h4><p>未经过去重的树如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/mmppto/PicGo-demo/blog-image/image-20231108163820585.png" alt="image-20231108163820585"></p><p>观察发现每次重复的情况，均为前一元素与当前元素相同造成的，所以我们的剪枝操作如下</p><p><strong>题目可见：</strong></p><p><a href="https://leetcode.cn/problems/subsets-ii/description/">子集||</a></p><ul><li>**未使用<code>used[]</code>**数组</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">subsetsWithDup</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        res = []</span><br><span class="line">        path = []</span><br><span class="line">        nums.sort()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">nums, startIndex</span>):</span><br><span class="line">            res.append(path[:])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> startIndex == <span class="built_in">len</span>(nums):</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startIndex, <span class="built_in">len</span>(nums)):</span><br><span class="line">                <span class="comment"># 剪枝</span></span><br><span class="line">                <span class="keyword">if</span> i &gt; startIndex <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                path.append(nums[i])</span><br><span class="line">                backtrack(nums, i + <span class="number">1</span>)</span><br><span class="line">                path.pop()</span><br><span class="line"></span><br><span class="line">        backtrack(nums, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><ul><li>使用<code>used[]</code>数组</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">subsetsWithDup</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        res = []</span><br><span class="line">        path = []</span><br><span class="line">        used = [<span class="literal">False</span>] * <span class="built_in">len</span>(nums)</span><br><span class="line">        nums.sort()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">nums, startIndex</span>):</span><br><span class="line">            res.append(path[:])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> startIndex == <span class="built_in">len</span>(nums):</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startIndex, <span class="built_in">len</span>(nums)):</span><br><span class="line">                <span class="comment"># 剪枝</span></span><br><span class="line">                <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>] <span class="keyword">and</span> <span class="keyword">not</span> used[i - <span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                path.append(nums[i])</span><br><span class="line">                used[i] = <span class="literal">True</span></span><br><span class="line">                backtrack(nums, i + <span class="number">1</span>)</span><br><span class="line">                used[i] = <span class="literal">False</span></span><br><span class="line">                path.pop()</span><br><span class="line"></span><br><span class="line">        backtrack(nums, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h4 id="组合-1"><a href="#组合-1" class="headerlink" title="组合"></a>组合</h4><p>去重思路同上子集</p><p><strong>题目可见：</strong></p><p><a href="https://leetcode.cn/problems/combination-sum-ii/description/">组合总和||</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combinationSum2</span>(<span class="params">self, candidates: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        res = []</span><br><span class="line">        path = []</span><br><span class="line">        candidates.sort()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># sum 记录当前的和</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">candidates, startIndex, <span class="built_in">sum</span></span>):</span><br><span class="line">            <span class="comment"># 剪枝</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">sum</span> &gt; target:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">sum</span> == target:</span><br><span class="line">                res.append(path[:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startIndex, <span class="built_in">len</span>(candidates)):</span><br><span class="line">                <span class="comment"># 这里同样可以用 used[] 数组进行去重操作</span></span><br><span class="line">                <span class="keyword">if</span> i &gt; startIndex <span class="keyword">and</span> candidates[i] == candidates[i - <span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                path.append(candidates[i])</span><br><span class="line">                <span class="built_in">sum</span> += candidates[i]</span><br><span class="line">                backtrack(candidates, i + <span class="number">1</span>, <span class="built_in">sum</span>)</span><br><span class="line">                <span class="built_in">sum</span> -= candidates[i]</span><br><span class="line">                path.pop()</span><br><span class="line"></span><br><span class="line">        backtrack(candidates, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h4 id="排列-1"><a href="#排列-1" class="headerlink" title="排列"></a>排列</h4><p>若采用子集的思想进行去重，即<code>i &gt; startIndex and nums[i] == nums[i - 1]</code></p><p>则会出现如下图情况</p><p><img src="https://cdn.jsdelivr.net/gh/mmppto/PicGo-demo/blog-image/image-20231108171436913.png" alt="image-20231108171436913"></p><p>观察可知红色的部分会被剪掉，因为在排列问题中<code>startIndex</code>始终为0，此时终止条件<code>len(path) == len(nums)</code>永远无法达到，所以结果集<code>res</code>里面没有存放任何答案。</p><p>所以这里我们考虑使用<code>i &gt; 0 and nums[i] == nums[i - 1] and not used[i - 1]</code>的方法去重，且恰巧排列中运用到了<code>used[]</code>数组，正确去重的排列树如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/mmppto/PicGo-demo/blog-image/image-20231108172811542.png" alt="image-20231108172811542"></p><p><strong>题目可见：</strong></p><p><a href="https://leetcode.cn/problems/7p8L0Z/description/">全排列||</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">permuteUnique</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        res = []</span><br><span class="line">        path = []</span><br><span class="line">        used = [<span class="literal">False</span>] * <span class="built_in">len</span>(nums)</span><br><span class="line">        nums.sort()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">nums, used</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(path) == <span class="built_in">len</span>(nums):</span><br><span class="line">                res.append(path[:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">                <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>] <span class="keyword">and</span> <span class="keyword">not</span> used[i - <span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> used[i]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                path.append(nums[i])</span><br><span class="line">                used[i] = <span class="literal">True</span></span><br><span class="line">                backtrack(nums, used)</span><br><span class="line">                path.pop()</span><br><span class="line">                used[i] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        backtrack(nums, used)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="元素无重复可复选"><a href="#元素无重复可复选" class="headerlink" title="元素无重复可复选"></a>元素无重复可复选</h3><h4 id="组合-2"><a href="#组合-2" class="headerlink" title="组合"></a>组合</h4><p>此类只有组合问题，先直接看题</p><p><strong>题目可见：</strong></p><p><a href="https://leetcode.cn/problems/combination-sum/description/">组合总和</a></p><p>组合树如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/mmppto/PicGo-demo/blog-image/image-20231108174148200.png" alt="image-20231108174148200"></p><p><strong>我们可以发现唯一的区别就是无限的递归，每次循环开始的下标都是从上次循环的下标开始，而不是 +1 后的下标</strong></p><p>需要注意的是，我们必须加一个<code>if sum &gt; target: return</code> ，不然真的会停不下来</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combinationSum</span>(<span class="params">self, candidates: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        res = []</span><br><span class="line">        path = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">candidates, startIndex, <span class="built_in">sum</span></span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">sum</span> &gt; target:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">sum</span> == target:</span><br><span class="line">                res.append(path[:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startIndex, <span class="built_in">len</span>(candidates)):</span><br><span class="line">                path.append(candidates[i])</span><br><span class="line">                <span class="built_in">sum</span> += candidates[i]</span><br><span class="line">                backtrack(candidates, i, <span class="built_in">sum</span>)</span><br><span class="line">                path.pop()</span><br><span class="line">                <span class="built_in">sum</span> -= candidates[i]</span><br><span class="line"></span><br><span class="line">        backtrack(candidates, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="回溯算法：集合划分问题"><a href="#回溯算法：集合划分问题" class="headerlink" title="回溯算法：集合划分问题"></a>回溯算法：集合划分问题</h2><p>这里直接引入题目</p><h3 id="划分为k个等和子集"><a href="#划分为k个等和子集" class="headerlink" title="划分为k个等和子集"></a>划分为k个等和子集</h3><p><strong>题目可见：</strong></p><p><a href="https://leetcode.cn/problems/partition-to-k-equal-sum-subsets/description/">划分为k个相等的子集</a></p><p><a href="https://lfool.github.io/LFool-Notes/algorithm/%E7%BB%8F%E5%85%B8%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%EF%BC%9A%E9%9B%86%E5%90%88%E5%88%92%E5%88%86%E9%97%AE%E9%A2%98.html">详细题解</a></p><p><strong>思路：</strong>问题抽象成将<code>n</code>个带数字的球放入<code>k</code>个桶中，使每个桶中的球的数字总和都相等，以球选桶的视角来看</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">canPartitionKSubsets</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="comment"># 无法分配的情况</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">sum</span>(nums) % k != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        target = <span class="built_in">sum</span>(nums) // k</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 先放大数字的球，便于较快的使桶中数字之和超过 target</span></span><br><span class="line">        nums.sort(reverse=<span class="literal">True</span>)  <span class="comment"># 剪枝 1</span></span><br><span class="line">        bucket = [<span class="number">0</span>] * k</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">nums, k, index, bucket</span>):</span><br><span class="line">            <span class="comment"># 此处不进行判断每个桶中数字之和是否等于 target 的原因是</span></span><br><span class="line">            <span class="comment"># 若每个球都能成功放进桶中，则自然每个桶中数字之和都为 target</span></span><br><span class="line">            <span class="comment"># 可以用反证法验证</span></span><br><span class="line">            <span class="keyword">if</span> index == <span class="built_in">len</span>(nums):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">                <span class="comment"># 放第一个球的时候，因为所有桶中都没有球，所以放哪个桶都是等价的</span></span><br><span class="line">                <span class="comment"># 这里默认放第一个桶</span></span><br><span class="line">                <span class="comment"># 此剪枝本质上包含在下一个剪枝当中</span></span><br><span class="line">                <span class="keyword">if</span> index == <span class="number">0</span> <span class="keyword">and</span> i != <span class="number">0</span>:  <span class="comment"># 剪枝 2</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 若当前桶中数字总和与前一个桶相同，则分配的结果是等价的，跳过</span></span><br><span class="line">                <span class="keyword">if</span> i != <span class="number">0</span> <span class="keyword">and</span> bucket[i] == bucket[i - <span class="number">1</span>]:  <span class="comment"># 剪枝 3</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># 当前桶中再放就要超过 target</span></span><br><span class="line">                <span class="keyword">if</span> bucket[i] + nums[index] &gt; target:  <span class="comment"># 剪枝 4</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                bucket[i] += nums[index]</span><br><span class="line">                <span class="comment"># 若出现满足条件的解立即终止</span></span><br><span class="line">                <span class="keyword">if</span> backtrack(nums, k, index + <span class="number">1</span>, bucket):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                bucket[i] -= nums[index]</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> backtrack(nums, k, <span class="number">0</span>, bucket)</span><br></pre></td></tr></table></figure><h3 id="火柴拼正方形"><a href="#火柴拼正方形" class="headerlink" title="火柴拼正方形"></a>火柴拼正方形</h3><p><a href="https://leetcode.cn/problems/matchsticks-to-square/description/">题目链接</a></p><p>思路与<code>划分为k个等和子集</code>一致，将其<code>k</code>设为4</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">makesquare</span>(<span class="params">self, matchsticks: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">sum</span>(matchsticks) % <span class="number">4</span> != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        target = <span class="built_in">sum</span>(matchsticks) // <span class="number">4</span></span><br><span class="line">        bucket = [<span class="number">0</span>] * <span class="number">4</span></span><br><span class="line">        matchsticks.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">matchsticks, index, bucket</span>):</span><br><span class="line">            <span class="keyword">if</span> index == <span class="built_in">len</span>(matchsticks):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                <span class="keyword">if</span> index == <span class="number">0</span> <span class="keyword">and</span> i &gt; <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> bucket[i] == bucket[i - <span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> bucket[i] + matchsticks[index] &gt; target:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                bucket[i] += matchsticks[index]</span><br><span class="line">                <span class="keyword">if</span> backtrack(matchsticks, index + <span class="number">1</span>, bucket):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                bucket[i] -= matchsticks[index]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> backtrack(matchsticks, <span class="number">0</span>, bucket)</span><br></pre></td></tr></table></figure><h3 id="公平分发饼干"><a href="#公平分发饼干" class="headerlink" title="公平分发饼干"></a>公平分发饼干</h3><p><a href="https://leetcode.cn/problems/fair-distribution-of-cookies/description/">题目链接</a></p><p><strong>区别：</strong>本题与常规的<code>集合划分问题</code>有所区别，对于之前的问题，题目给出每个桶可容纳的大小，我们根据是否溢出来决定是否选择此桶，但是此题中没有桶可容纳的大小，只是让我们求所有划分中最大值的最小值</p><p><strong>思路：</strong>大体思路与<code>划分为k个相等的子集</code>相同，但此题中剪枝操作比较多，详细解释见以下代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">distributeCookies</span>(<span class="params">self, cookies: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        bucket = [<span class="number">0</span>] * k  <span class="comment"># k 个学生作为 k 个桶</span></span><br><span class="line">        cookies.sort(reverse=<span class="literal">True</span>)  <span class="comment"># 优先让值更大的球先选，可以增加回溯的命中率，易于剪枝4</span></span><br><span class="line">        res = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)  <span class="comment"># res 为结果，初始化为最大值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">cookies, index, bucket</span>):</span><br><span class="line">            <span class="keyword">nonlocal</span> res  <span class="comment"># 引用嵌套函数外的变量</span></span><br><span class="line">            <span class="keyword">if</span> index == <span class="built_in">len</span>(cookies):</span><br><span class="line">                res = <span class="built_in">min</span>(res, <span class="built_in">max</span>(bucket))</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 剪枝1</span></span><br><span class="line">            cnt = <span class="number">0</span>  <span class="comment"># 记录还没有分到零食的学生数量</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> bucket:</span><br><span class="line">                <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">                    cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> cnt &gt; <span class="built_in">len</span>(cookies) - index:  <span class="comment"># 未分到零食的学生数量大于还剩的零食数量，必然不合理</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">                <span class="comment"># 剪枝2</span></span><br><span class="line">                <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> index == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 剪枝3</span></span><br><span class="line">                <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> bucket[i] == bucket[i - <span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 剪枝4</span></span><br><span class="line">                <span class="comment"># 若当前桶中的值已经大于 res，则必然不是最小值，跳过</span></span><br><span class="line">                <span class="comment"># 先前对球进行从大到小排序的操作，可以让桶中数值更快的超过最小值</span></span><br><span class="line">                <span class="keyword">if</span> bucket[i] + cookies[index] &gt; res:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                bucket[i] += cookies[index]</span><br><span class="line">                backtrack(cookies, index + <span class="number">1</span>, bucket)</span><br><span class="line">                bucket[i] -= cookies[index]</span><br><span class="line"></span><br><span class="line">        backtrack(cookies, <span class="number">0</span>, bucket)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="岛屿问题（DFS）"><a href="#岛屿问题（DFS）" class="headerlink" title="岛屿问题（DFS）"></a>岛屿问题（DFS）</h2><p><strong>定义框架</strong></p><p>本质其实就是 <code>DFS</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">grid, i, j</span>):</span><br><span class="line">    n, m = <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 越界检查</span></span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">0</span> <span class="keyword">or</span> i &gt;= n <span class="keyword">or</span> j &lt; <span class="number">0</span> <span class="keyword">or</span> j &gt;= m:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当前位置为水</span></span><br><span class="line">    <span class="keyword">if</span> grid[i][j] == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 否则将当前陆地改为水，代表此处遍历过</span></span><br><span class="line">    grid[i][j] = <span class="string">&#x27;0&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 递归处理上下左右</span></span><br><span class="line">    dfs(grid, i - <span class="number">1</span>, j)  <span class="comment"># 上</span></span><br><span class="line">    dfs(grid, i + <span class="number">1</span>, j)  <span class="comment"># 下</span></span><br><span class="line">    dfs(grid, i, j - <span class="number">1</span>)  <span class="comment"># 左</span></span><br><span class="line">    dfs(grid, i, j + <span class="number">1</span>)  <span class="comment"># 右</span></span><br></pre></td></tr></table></figure><h3 id="岛屿数量"><a href="#岛屿数量" class="headerlink" title="岛屿数量"></a>岛屿数量</h3><p><a href="https://leetcode.cn/problems/number-of-islands/description/">题目链接</a></p><p><strong>思路：</strong>把与1相连的区域进行<code>FloodFill</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numIslands</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">grid, i, j</span>):</span><br><span class="line">            n, m = <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 越界</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="number">0</span> <span class="keyword">or</span> i &gt;= n <span class="keyword">or</span> j &lt; <span class="number">0</span> <span class="keyword">or</span> j &gt;= m:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 当前位置为水</span></span><br><span class="line">            <span class="keyword">if</span> grid[i][j] == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将当前陆地改为水，代表此处遍历过</span></span><br><span class="line">            grid[i][j] = <span class="string">&#x27;0&#x27;</span></span><br><span class="line"></span><br><span class="line">            dfs(grid, i - <span class="number">1</span>, j)  <span class="comment"># 上</span></span><br><span class="line">            dfs(grid, i + <span class="number">1</span>, j)  <span class="comment"># 下</span></span><br><span class="line">            dfs(grid, i, j - <span class="number">1</span>)  <span class="comment"># 左</span></span><br><span class="line">            dfs(grid, i, j + <span class="number">1</span>)  <span class="comment"># 右</span></span><br><span class="line"></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid[<span class="number">0</span>])):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                    res += <span class="number">1</span></span><br><span class="line">                    dfs(grid, i, j)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="统计封闭岛屿的数目"><a href="#统计封闭岛屿的数目" class="headerlink" title="统计封闭岛屿的数目"></a>统计封闭岛屿的数目</h3><p><a href="https://leetcode.cn/problems/number-of-closed-islands/description/">题目链接</a></p><p><strong>前提：</strong>与岸边接壤的岛屿不算封闭岛屿</p><p><strong>思路：</strong>先将与岸边接壤的岛屿排除，再统计内部的封闭岛屿数量</p><p><strong>相似题目：</strong><a href="https://leetcode.cn/problems/number-of-enclaves/description/">飞地的数量</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">closedIsland</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n, m = <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># FloodFill</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">grid, i, j</span>):</span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="number">0</span> <span class="keyword">or</span> i &gt;= n <span class="keyword">or</span> j &lt; <span class="number">0</span> <span class="keyword">or</span> j &gt;= m:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> grid[i][j] == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            grid[i][j] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            dfs(grid, i - <span class="number">1</span>, j)</span><br><span class="line">            dfs(grid, i + <span class="number">1</span>, j)</span><br><span class="line">            dfs(grid, i, j - <span class="number">1</span>)</span><br><span class="line">            dfs(grid, i, j + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 上下两边的岛屿排除</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">if</span> grid[<span class="number">0</span>][i] == <span class="number">0</span>:</span><br><span class="line">                dfs(grid, <span class="number">0</span>, i)</span><br><span class="line">            <span class="keyword">if</span> grid[n - <span class="number">1</span>][i] == <span class="number">0</span>:</span><br><span class="line">                dfs(grid, n - <span class="number">1</span>, i)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 左右两侧岛屿排除</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> grid[i][<span class="number">0</span>] == <span class="number">0</span>:</span><br><span class="line">                dfs(grid, i, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> grid[i][m - <span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">                dfs(grid, i, m - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 统计内部岛屿数量</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m - <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j] == <span class="number">0</span>:</span><br><span class="line">                    res += <span class="number">1</span></span><br><span class="line">                    dfs(grid, i, j)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="岛屿的最大面积"><a href="#岛屿的最大面积" class="headerlink" title="岛屿的最大面积"></a>岛屿的最大面积</h3><p><a href="https://leetcode.cn/problems/max-area-of-island/description/">题目链接</a></p><p><strong>方法一：</strong><code>dfs</code>数组返回值设置为当前岛屿面积</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxAreaOfIsland</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n, m = <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># FloodFill的同时返回岛屿的面积</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">grid, i, j</span>):</span><br><span class="line">            <span class="comment"># 越界，岛屿大小为0</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="number">0</span> <span class="keyword">or</span> i &gt;= n <span class="keyword">or</span> j &lt; <span class="number">0</span> <span class="keyword">or</span> j &gt;= m:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 当前位置为海洋，岛屿大小为0</span></span><br><span class="line">            <span class="keyword">if</span> grid[i][j] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 填充，代表已经遍历过此陆地</span></span><br><span class="line">            grid[i][j] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 返回当前位置的一个陆地及其上下左右分支上的陆地数量</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span> + dfs(grid, i - <span class="number">1</span>, j) + dfs(grid, i + <span class="number">1</span>, j) + dfs(grid, i, j - <span class="number">1</span>) + dfs(grid, i, j + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j] == <span class="number">1</span>:</span><br><span class="line">                    res = <span class="built_in">max</span>(res, dfs(grid, i, j))</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><strong>方法二：</strong>设置一个全局变量<code>s</code>记录每次岛屿的面积</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxAreaOfIsland</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n, m = <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">grid, i, j</span>):</span><br><span class="line">            <span class="keyword">nonlocal</span> s</span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="number">0</span> <span class="keyword">or</span> i &gt;= n <span class="keyword">or</span> j &lt; <span class="number">0</span> <span class="keyword">or</span> j &gt;= m:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> grid[i][j] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            s += <span class="number">1</span></span><br><span class="line">            grid[i][j] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            dfs(grid, i - <span class="number">1</span>, j)</span><br><span class="line">            dfs(grid, i + <span class="number">1</span>, j)</span><br><span class="line">            dfs(grid, i, j - <span class="number">1</span>)</span><br><span class="line">            dfs(grid, i, j + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j] == <span class="number">1</span>:</span><br><span class="line">                    s = <span class="number">0</span></span><br><span class="line">                    dfs(grid, i, j)</span><br><span class="line">                    res = <span class="built_in">max</span>(res, s)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="统计子岛屿"><a href="#统计子岛屿" class="headerlink" title="统计子岛屿"></a>统计子岛屿</h3><p><a href="https://leetcode.cn/problems/count-sub-islands/description/">题目链接</a></p><p><strong>方法一：</strong>设置全局变量<code>tag</code>记录<code>grid2</code>中的岛屿是否为<code>grid1</code>的子岛屿</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">countSubIslands</span>(<span class="params">self, grid1: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], grid2: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n, m = <span class="built_in">len</span>(grid1), <span class="built_in">len</span>(grid1[<span class="number">0</span>])</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">grid1, grid2, i, j</span>):</span><br><span class="line">            <span class="keyword">nonlocal</span> tag</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 越界检查</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="number">0</span> <span class="keyword">or</span> i &gt;= n <span class="keyword">or</span> j &lt; <span class="number">0</span> <span class="keyword">or</span> j &gt;= m:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 该位置为水</span></span><br><span class="line">            <span class="keyword">if</span> grid2[i][j] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 正常 FloodFill</span></span><br><span class="line">            grid2[i][j] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 若在 grid2 中为陆地但在 grid1 中为水，则该岛屿不能是子岛屿</span></span><br><span class="line">            <span class="keyword">if</span> grid1[i][j] == <span class="number">0</span>:</span><br><span class="line">                tag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 遍历当前位置的上下左右</span></span><br><span class="line">            dfs(grid1, grid2, i - <span class="number">1</span>, j)</span><br><span class="line">            dfs(grid1, grid2, i + <span class="number">1</span>, j)</span><br><span class="line">            dfs(grid1, grid2, i, j - <span class="number">1</span>)</span><br><span class="line">            dfs(grid1, grid2, i, j + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">                <span class="keyword">if</span> grid2[i][j] == <span class="number">1</span>:</span><br><span class="line">                    tag = <span class="literal">True</span></span><br><span class="line">                    dfs(grid1, grid2, i, j)</span><br><span class="line">                    <span class="keyword">if</span> tag:  <span class="comment"># 若 grid2 中岛屿的所有陆地在 grid1 相同位置也有，则 tag 一直为 True，说明当前岛屿为子岛屿</span></span><br><span class="line">                        res += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><strong>方法二：</strong>遍历<code>grid2</code>中所有的陆地，若在<code>grid1</code>中的相同位置为水，则<code>grid2</code>中该陆地所在的岛屿不是子岛屿，将其填充。遍历完成后，此时<code>grid2</code>中岛屿皆为子岛屿</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">countSubIslands</span>(<span class="params">self, grid1: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], grid2: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n, m = <span class="built_in">len</span>(grid1), <span class="built_in">len</span>(grid1[<span class="number">0</span>])</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">grid2, i, j</span>):</span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="number">0</span> <span class="keyword">or</span> i &gt;= n <span class="keyword">or</span> j &lt; <span class="number">0</span> <span class="keyword">or</span> j &gt;= m:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> grid2[i][j] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            grid2[i][j] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            dfs(grid2, i - <span class="number">1</span>, j)</span><br><span class="line">            dfs(grid2, i + <span class="number">1</span>, j)</span><br><span class="line">            dfs(grid2, i, j - <span class="number">1</span>)</span><br><span class="line">            dfs(grid2, i, j + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">                <span class="keyword">if</span> grid2[i][j] == <span class="number">1</span> <span class="keyword">and</span> grid1[i][j] != <span class="number">1</span>:</span><br><span class="line">                    dfs(grid2, i, j)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">                <span class="keyword">if</span> grid2[i][j] == <span class="number">1</span>:</span><br><span class="line">                    res += <span class="number">1</span></span><br><span class="line">                    dfs(grid2, i, j)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="被围绕的区域"><a href="#被围绕的区域" class="headerlink" title="被围绕的区域"></a>被围绕的区域</h3><p><a href="https://leetcode.cn/problems/surrounded-regions/description/">题目链接</a></p><p><strong>方法一（DFS）：</strong>首先遍历边缘上的陆地，将其所在岛屿的所有陆地标记为<code>A</code>，其次遍历整个<code>board</code>，将内部封闭岛屿的的所有陆地<code>O</code>改为水<code>X</code>，最终将与边缘接壤的岛屿中的所有陆地变回<code>O</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">self, board: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify board in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        n, m = <span class="built_in">len</span>(board), <span class="built_in">len</span>(board[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">board, i, j</span>):</span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="number">0</span> <span class="keyword">or</span> i &gt;= n <span class="keyword">or</span> j &lt; <span class="number">0</span> <span class="keyword">or</span> j &gt;= m:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> board[i][j] != <span class="string">&#x27;O&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            board[i][j] = <span class="string">&#x27;A&#x27;</span></span><br><span class="line"></span><br><span class="line">            dfs(board, i - <span class="number">1</span>, j)</span><br><span class="line">            dfs(board, i + <span class="number">1</span>, j)</span><br><span class="line">            dfs(board, i, j - <span class="number">1</span>)</span><br><span class="line">            dfs(board, i, j + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 上下边界</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">if</span> board[<span class="number">0</span>][i] == <span class="string">&#x27;O&#x27;</span>:</span><br><span class="line">                dfs(board, <span class="number">0</span>, i)</span><br><span class="line">            <span class="keyword">if</span> board[n - <span class="number">1</span>][i] == <span class="string">&#x27;O&#x27;</span>:</span><br><span class="line">                dfs(board, n - <span class="number">1</span>, i)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 左右边界</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> board[i][<span class="number">0</span>] == <span class="string">&#x27;O&#x27;</span>:</span><br><span class="line">                dfs(board, i, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> board[i][m - <span class="number">1</span>] == <span class="string">&#x27;O&#x27;</span>:</span><br><span class="line">                dfs(board, i, m - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] == <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">                    board[i][j] = <span class="string">&#x27;O&#x27;</span></span><br><span class="line">                <span class="keyword">elif</span> board[i][j] == <span class="string">&#x27;O&#x27;</span>:</span><br><span class="line">                    board[i][j] = <span class="string">&#x27;X&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>方法二（并查集）：</strong></p><p><a href="https://lfool.github.io/LFool-Notes/algorithm/%E5%B9%B6%E6%9F%A5%E9%9B%86-Union-Find.html">并查集详解</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">self, board: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify board in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        n, m = <span class="built_in">len</span>(board), <span class="built_in">len</span>(board[<span class="number">0</span>])</span><br><span class="line">        parent = [<span class="number">0</span>] * (n * m + <span class="number">1</span>)  <span class="comment"># 存储父节点</span></span><br><span class="line">        size = [<span class="number">0</span>] * (n * m + <span class="number">1</span>)  <span class="comment"># 存储连通分量中的节点数（只有根节点的size才能代表整个连通分量中的节点数）</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n * m + <span class="number">1</span>):  <span class="comment"># 初始化并查集</span></span><br><span class="line">            parent[i] = i</span><br><span class="line">            size[i] = <span class="number">1</span></span><br><span class="line">        dummy = n * m  <span class="comment"># 虚拟节点，用于连接边界上的陆地</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 寻找x节点的祖宗节点 （路径压缩）接近于O(1)的复杂度</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">x</span>):</span><br><span class="line">            <span class="keyword">if</span> parent[x] != x:</span><br><span class="line">                parent[x] = find(parent[x])</span><br><span class="line">            <span class="keyword">return</span> parent[x]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将两个不在一个连通分量的节点放在同一个连通分量中</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">union</span>(<span class="params">x, y</span>):</span><br><span class="line">            root_x = find(x)</span><br><span class="line">            root_y = find(y)</span><br><span class="line">            <span class="keyword">if</span> root_x == root_y:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="comment"># 平衡性优化 尽量保证树的平衡，减少头重脚轻的情况</span></span><br><span class="line">            <span class="comment"># 将节点数量少的分量接到节点数量多的分量上</span></span><br><span class="line">            <span class="keyword">if</span> size[root_x] &gt; size[root_y]:</span><br><span class="line">                size[root_x] += size[root_y]</span><br><span class="line">                parent[root_y] = root_x</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                size[root_y] += size[root_x]</span><br><span class="line">                parent[root_x] = root_y</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查x，y是否在同一分量中</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">connected</span>(<span class="params">x, y</span>):</span><br><span class="line">            <span class="keyword">return</span> find(x) == find(y)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将边界上的陆地与dummy放在一个分量中</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">if</span> board[<span class="number">0</span>][i] == <span class="string">&#x27;O&#x27;</span>:</span><br><span class="line">                union(dummy, i)</span><br><span class="line">            <span class="keyword">if</span> board[n - <span class="number">1</span>][i] == <span class="string">&#x27;O&#x27;</span>:</span><br><span class="line">                union(dummy, (n - <span class="number">1</span>) * m + i)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> board[i][<span class="number">0</span>] == <span class="string">&#x27;O&#x27;</span>:</span><br><span class="line">                union(dummy, i * m)</span><br><span class="line">            <span class="keyword">if</span> board[i][m - <span class="number">1</span>] == <span class="string">&#x27;O&#x27;</span>:</span><br><span class="line">                union(dummy, i * m + m - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        directions = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, -<span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将内部的封闭的点相连，而与边界上的陆地有接壤的陆地，则与dummy放在了同一分量中</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m - <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] == <span class="string">&#x27;O&#x27;</span>:</span><br><span class="line">                    <span class="keyword">for</span> d <span class="keyword">in</span> directions:</span><br><span class="line">                        next_i = i + d[<span class="number">0</span>]</span><br><span class="line">                        next_j = j + d[<span class="number">1</span>]</span><br><span class="line">                        <span class="keyword">if</span> board[next_i][next_j] == <span class="string">&#x27;O&#x27;</span>:</span><br><span class="line">                            union(i * m + j, next_i * m + next_j)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] == <span class="string">&#x27;O&#x27;</span> <span class="keyword">and</span> <span class="keyword">not</span> connected(dummy, i * m + j):</span><br><span class="line">                    board[i][j] = <span class="string">&#x27;X&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="太平洋大西洋水流问题"><a href="#太平洋大西洋水流问题" class="headerlink" title="太平洋大西洋水流问题"></a>太平洋大西洋水流问题</h3><p><a href="https://leetcode.cn/problems/pacific-atlantic-water-flow/description/">题目链接</a></p><p><strong>思路：</strong></p><ul><li>参考<code>被围绕的区域</code>这道题，从四条边入手，我们判断与边相连需要通过高度，只有当前格子比前一个格子高，才能保证水能流入<code>Ocean</code></li><li>需要注意的是，之前的题目我们通过修改当前格子的值来表示当前格子已经遍历过的状态，但在此题中我们不能修改格子的值，所以采用<code>visited[][]</code>数组来记录每个格子访问的状态</li><li>分两部分，首先求出可以流入<code>Pacific Ocean</code>的格子，再求出可以流入<code>Atlantic Ocean</code>的格子，求两部分相交的格子即可</li></ul><p><strong>示意图：</strong></p><img src="https://cdn.jsdelivr.net/gh/mmppto/PicGo-demo/blog-image/image-20231108090852768.png" alt="image-20231108090852768" style="zoom:33%;" /><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pacificAtlantic</span>(<span class="params">self, heights: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        n, m = <span class="built_in">len</span>(heights), <span class="built_in">len</span>(heights[<span class="number">0</span>])</span><br><span class="line">        res = []</span><br><span class="line"></span><br><span class="line">        po = [[<span class="literal">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        ao = [[<span class="literal">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 该函数通过 pre 记录前一个格子高度，便于当前格子与前一个格子的高度比较</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">heights, tag, i, j, pre</span>):</span><br><span class="line">            <span class="comment"># 以下三种情况直接说明当前格子无需访问</span></span><br><span class="line">            <span class="comment"># 越界</span></span><br><span class="line">            <span class="comment"># 已经访问过</span></span><br><span class="line">            <span class="comment"># 高度小于前一个格子，此路径无法流入海洋</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="number">0</span> <span class="keyword">or</span> i &gt;= n <span class="keyword">or</span> j &lt; <span class="number">0</span> <span class="keyword">or</span> j &gt;= m <span class="keyword">or</span> tag[i][j] <span class="keyword">or</span> heights[i][j] &lt; pre:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            tag[i][j] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            dfs(heights, tag, i - <span class="number">1</span>, j, heights[i][j])</span><br><span class="line">            dfs(heights, tag, i + <span class="number">1</span>, j, heights[i][j])</span><br><span class="line">            dfs(heights, tag, i, j - <span class="number">1</span>, heights[i][j])</span><br><span class="line">            dfs(heights, tag, i, j + <span class="number">1</span>, heights[i][j])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            dfs(heights, po, <span class="number">0</span>, i, heights[<span class="number">0</span>][i])</span><br><span class="line">            dfs(heights, ao, n - <span class="number">1</span>, i, heights[n - <span class="number">1</span>][i])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 此处不能像之前的题目一样省略上一个循环已经遍历过的点</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            dfs(heights, po, i, <span class="number">0</span>, heights[i][<span class="number">0</span>])</span><br><span class="line">            dfs(heights, ao, i, m - <span class="number">1</span>, heights[i][m - <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">                <span class="keyword">if</span> po[i][j] <span class="keyword">and</span> ao[i][j]:</span><br><span class="line">                    res.append([i, j])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="回溯算法经典题"><a href="#回溯算法经典题" class="headerlink" title="回溯算法经典题"></a>回溯算法经典题</h2><h3 id="括号生成"><a href="#括号生成" class="headerlink" title="括号生成"></a>括号生成</h3><p><a href="https://leetcode.cn/problems/generate-parentheses/description/">题目链接</a></p><p><strong>思路：</strong>解决该问题的关键在于如何剪枝，当右括号的个数多于左括号时，例如<code>)))()</code>，明显是一个错误的结果。正常情况时，每个节点处有两个分支，分支1代表此处选择左括号，分支2代表此处放入右括号。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generateParenthesis</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        res = []</span><br><span class="line">        path = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># left 表示已经使用的左括号个数</span></span><br><span class="line">        <span class="comment"># right 表示已经使用的右括号个数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">left, right</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(path) == <span class="number">2</span> * n:</span><br><span class="line">                res.append(<span class="string">&#x27;&#x27;</span>.join(path))</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 右括号数量大于左括号</span></span><br><span class="line">            <span class="comment"># 如 ()))</span></span><br><span class="line">            <span class="comment"># 必然不合法，剪枝</span></span><br><span class="line">            <span class="keyword">if</span> right &gt; left:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 分支1，放入左括号</span></span><br><span class="line">            <span class="keyword">if</span> left &lt; n:</span><br><span class="line">                path.append(<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                backtrack(left + <span class="number">1</span>, right)</span><br><span class="line">                path.pop()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 分支2，放入右括号</span></span><br><span class="line">            <span class="keyword">if</span> right &lt; n:</span><br><span class="line">                path.append(<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">                backtrack(left, right + <span class="number">1</span>)</span><br><span class="line">                path.pop()</span><br><span class="line"></span><br><span class="line">        backtrack(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="单词拆分"><a href="#单词拆分" class="headerlink" title="单词拆分||"></a>单词拆分||</h3><p><a href="https://leetcode.cn/problems/word-break-ii/description/">题目链接</a></p><p><strong>思路：</strong>本题本质上是要对字符串进行分割，保证被分割的每个部分都在<code>wordDict</code>中</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wordBreak</span>(<span class="params">self, s: <span class="built_in">str</span>, wordDict: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        res = []</span><br><span class="line">        path = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">startIndex</span>):</span><br><span class="line">            <span class="keyword">if</span> startIndex == <span class="built_in">len</span>(s):</span><br><span class="line">                res.append(<span class="string">&#x27; &#x27;</span>.join(path))</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startIndex, <span class="built_in">len</span>(s)):</span><br><span class="line">                tmp = s[startIndex:i + <span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> tmp <span class="keyword">not</span> <span class="keyword">in</span> wordDict:  <span class="comment"># 剪枝</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                path.append(tmp)</span><br><span class="line">                backtrack(i + <span class="number">1</span>)</span><br><span class="line">                path.pop()</span><br><span class="line"></span><br><span class="line">        backtrack(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="单词拆分-1"><a href="#单词拆分-1" class="headerlink" title="单词拆分"></a>单词拆分</h3><p><a href="https://leetcode.cn/problems/word-break/description/">题目链接</a></p><ul><li><strong>动态规划</strong></li></ul><p>本题参照上题进行回溯会<code>TLE</code>，是因为本题字符串<code>s</code>的长度远大于上一题，导致搜索树更加复杂，故本题不使用回溯算法，这里用动态规划解决</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wordBreak</span>(<span class="params">self, s: <span class="built_in">str</span>, wordDict: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(s)</span><br><span class="line">        <span class="comment"># dp[i] 表示前 i 个字母组成的单词是否可以由 wordDict 中的单词构成</span></span><br><span class="line">        dp = [<span class="literal">False</span>] * (n + <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 初始化 当一个字母都没有时，可以由其中的单词构成，接着看下面的代码，会发现 dp[0] 必须为 True </span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):  <span class="comment"># 遍历前 1-n 个字母组成的单词</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):  <span class="comment"># 对新加入的字母和之前所有的字母可能组成新单词的情况进行遍历</span></span><br><span class="line">                <span class="keyword">if</span> dp[j] <span class="keyword">and</span> s[j:i] <span class="keyword">in</span> wordDict:</span><br><span class="line">                    dp[i] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[n]</span><br></pre></td></tr></table></figure><ul><li><strong>回溯（记录状态）</strong></li></ul><p><strong>分析</strong>：再看回溯算法时，注意到回溯算法仍然是可以优化的，这里首先分析一下导致回溯算法超时的主要原因，先给出一个样例<code>s = &#39;abcd...&#39;, wordDict = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;ab&quot;,&quot;bc&quot;]</code>，很显然这里的<code>s</code>无法由字典中的单词构成，现在来模拟一下部分回溯的过程如下：</p><p>当处于下图的状态时，显然需要回溯，因为后面的部分<code>[d...]</code>无法拆分了</p><img src="https://cdn.jsdelivr.net/gh/mmppto/PicGo-demo/blog-image/image-20231117165424393.png" alt="image-20231117165424393" style="zoom:50%;" /><p>在回溯的过程中，会出现以下两种状态，如下图：</p><img src="https://cdn.jsdelivr.net/gh/mmppto/PicGo-demo/blog-image/image-20231117165629445.png" alt="image-20231117165629445" style="zoom:50%;" /><p>至此状态时，我们仍然不知道<code>[d...]</code>部分的字符串是否可以拆分成字典中的单词，所以递归的处理<code>[d...]</code>，显然这里存在<strong>重复子问题</strong>，在第一次到达此位置时，我们已经对<code>[d...]</code>部分处理过，已经知道了<code>[d...]</code>是无法拆分的，但是未将此状态给记录下来，导致在第二次到达此位置时，我们重复的处理了这个问题。所以想要避免重复处理，我们只需及时将<code>[d...]</code>不可拆分的状态给记录下来即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wordBreak</span>(<span class="params">self, s: <span class="built_in">str</span>, wordDict: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="comment"># tag[i] 表示从第 i 个字母到最后一个字母组成的单词是否能由字典中的单词构成</span></span><br><span class="line">        <span class="comment"># tag[i] = 0 表示未处理过，= 1 表示可以由字典中的单词构成，= -1 表示不可以</span></span><br><span class="line">        tag = [<span class="number">0</span>] * <span class="built_in">len</span>(s)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">startIndex</span>):</span><br><span class="line">            <span class="keyword">if</span> startIndex == <span class="built_in">len</span>(s):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 子问题已经处理过，直接返回结果</span></span><br><span class="line">            <span class="keyword">if</span> tag[startIndex]:</span><br><span class="line">                <span class="keyword">return</span> tag[startIndex] == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startIndex, <span class="built_in">len</span>(s)):</span><br><span class="line">                tmp = s[startIndex:i + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> tmp <span class="keyword">not</span> <span class="keyword">in</span> wordDict:  <span class="comment"># 剪枝</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> backtrack(i + <span class="number">1</span>):</span><br><span class="line">                    <span class="comment"># [startIndex:len(s)] 内的单词可以由字典中的单词组成</span></span><br><span class="line">                    tag[startIndex] = <span class="number">1</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 从 startIndex 位置开始的所有分割方式都不能满足条件</span></span><br><span class="line">            tag[startIndex] = -<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> backtrack(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法模板</title>
      <link href="/2023/09/07/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/"/>
      <url>/2023/09/07/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="算法模板"><a href="#算法模板" class="headerlink" title="算法模板"></a>算法模板</h1><h2 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h2><hr><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p><a href="https://www.acwing.com/problem/content/787/">题目链接</a></p><p><strong>基本思路</strong></p><p>分治</p><ol><li>确定分界点<code>q[(l + r) // 2]</code></li><li>调整范围，保证分界点左侧的数据小于分界点，分界点右侧的数据大于分界点</li><li>递归处理左右两侧</li></ol><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort</span>(<span class="params">q, l, r</span>):</span><br><span class="line">    <span class="comment"># 区间内数据量小于等于1</span></span><br><span class="line">    <span class="keyword">if</span> l &gt;= r:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    x, i, j = q[(l + r) // <span class="number">2</span>], l - <span class="number">1</span>, r + <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; j:</span><br><span class="line">        <span class="comment"># 得到左区间内遍历到的第一个大于等于分界点的值</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> q[i] &gt;= x:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 得到遍历到的第一个小于等于分界点的值</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> q[j] &lt;= x:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> i &lt; j:</span><br><span class="line">            q[i], q[j] = q[j], q[i]</span><br><span class="line">    quick_sort(q, l, j)</span><br><span class="line">    quick_sort(q, j + <span class="number">1</span>, r)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    q = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">input</span>().split()]</span><br><span class="line">    quick_sort(q, <span class="number">0</span>, n - <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, q)))</span><br></pre></td></tr></table></figure><hr><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p><a href="https://www.acwing.com/problem/content/789/">题目链接</a></p><p><strong>基本思路</strong></p><p>分治</p><ol><li>确定中间下标<code>mid = (l + r) // 2</code></li><li>递归处理左右两侧数据</li><li>归并，将两侧数据合二为一</li></ol><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge_sort</span>(<span class="params">q, l, r</span>):</span><br><span class="line">    <span class="comment"># 区间内数据量小于等于1</span></span><br><span class="line">    <span class="keyword">if</span> l &gt;= r:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    mid = (l + r) // <span class="number">2</span></span><br><span class="line">    merge_sort(q, l, mid)</span><br><span class="line">    merge_sort(q, mid + <span class="number">1</span>, r)</span><br><span class="line"></span><br><span class="line">    tmp = []</span><br><span class="line">    i, j = l, mid + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 将左右两侧数据按从小到大合并</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid <span class="keyword">and</span> j &lt;= r:</span><br><span class="line">        <span class="keyword">if</span> q[i] &lt;= q[j]:</span><br><span class="line">            tmp.append(q[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp.append(q[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    tmp += q[i:mid + <span class="number">1</span>]</span><br><span class="line">    tmp += q[j:r + <span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将原数组中对应区间的序列换成排序好的新序列</span></span><br><span class="line">    q[l:r + <span class="number">1</span>] = tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    q = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">input</span>().split()]</span><br><span class="line">    merge_sort(q, <span class="number">0</span>, n - <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, q)))</span><br></pre></td></tr></table></figure><hr><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p><a href="https://www.acwing.com/problem/content/791/">题目链接</a></p><p><strong>代码1</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search_left</span>(<span class="params">a, n, target</span>):</span><br><span class="line">    <span class="comment"># l+1==r为循环退出条件</span></span><br><span class="line">    <span class="comment"># [0,l]为小于目标值的部分，[r,length)为大于等于目标值的部分</span></span><br><span class="line">    l, r = -<span class="number">1</span>, n</span><br><span class="line">    <span class="keyword">while</span> l + <span class="number">1</span> != r:</span><br><span class="line">        mid = (l + r) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> a[mid] &gt;= target:</span><br><span class="line">            r = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l = mid</span><br><span class="line">    <span class="keyword">if</span> a[r] != target:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search_right</span>(<span class="params">a, n, target</span>):</span><br><span class="line">    <span class="comment"># [0,l]为小于等于目标值的部分，[r,length)为大于等于目标值的部分</span></span><br><span class="line">    l, r = -<span class="number">1</span>, n</span><br><span class="line">    <span class="keyword">while</span> l + <span class="number">1</span> != r:</span><br><span class="line">        mid = (l + r) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> a[mid] &lt;= target:</span><br><span class="line">            l = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            r = mid</span><br><span class="line">    <span class="keyword">if</span> a[l] != target:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n, q = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    a = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">input</span>().split()]</span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        q -= <span class="number">1</span></span><br><span class="line">        target = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">        <span class="comment"># 数组中不存在目标值</span></span><br><span class="line">        <span class="keyword">if</span> target <span class="keyword">not</span> <span class="keyword">in</span> a:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;-1 -1&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="built_in">print</span>(binary_search_left(a, n, target), binary_search_right(a, n, target))</span><br></pre></td></tr></table></figure><p><strong>代码2（常用）</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search_left</span>(<span class="params">a, n, target</span>):</span><br><span class="line">    l, r = <span class="number">0</span>, n - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> l &lt; r:</span><br><span class="line">        mid = (l + r) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> a[mid] &gt;= target:</span><br><span class="line">            r = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> target != a[l]:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search_right</span>(<span class="params">a, n, target</span>):</span><br><span class="line">    l, r = <span class="number">0</span>, n - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> l &lt; r:</span><br><span class="line">        <span class="comment"># l=mid出现时mid括号内多加1</span></span><br><span class="line">        mid = (l + r + <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> a[mid] &lt;= target:</span><br><span class="line">            l = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            r = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> a[l] != target:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n, q = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        q -= <span class="number">1</span></span><br><span class="line">        target = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">        <span class="built_in">print</span>(binary_search_left(a, n, target), binary_search_right(a, n, target))</span><br></pre></td></tr></table></figure><h4 id="特殊排序"><a href="#特殊排序" class="headerlink" title="特殊排序"></a>特殊排序</h4><p><a href="https://www.acwing.com/problem/content/115/">题目链接</a></p><p><a href="https://www.acwing.com/video/765/">视频讲解</a></p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Forward declaration of compare API.</span></span><br><span class="line"><span class="comment"># def compare(a, b):</span></span><br><span class="line"><span class="comment"># @param a, b int</span></span><br><span class="line"><span class="comment"># @return bool</span></span><br><span class="line"><span class="comment"># return bool means whether a is less than b.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">specialSort</span>(<span class="params">self, N</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type N: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        res = [<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, N + <span class="number">1</span>):</span><br><span class="line">            l, r = <span class="number">0</span>, <span class="built_in">len</span>(res) - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> l &lt; r:</span><br><span class="line">                mid = (l + r + <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">                <span class="keyword">if</span> compare(res[mid], i):</span><br><span class="line">                    l = mid</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    r = mid - <span class="number">1</span></span><br><span class="line">                    </span><br><span class="line">            <span class="comment"># res.insert(r + 1, i)</span></span><br><span class="line">            <span class="comment"># 以下三行在python中一句话即可</span></span><br><span class="line">            res.append(i)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res) - <span class="number">2</span>, r, -<span class="number">1</span>):</span><br><span class="line">                res[j], res[j + <span class="number">1</span>] = res[j + <span class="number">1</span>], res[j]</span><br><span class="line">            <span class="keyword">if</span> compare(i, res[r]):</span><br><span class="line">                res[r], res[r + <span class="number">1</span>] = res[r + <span class="number">1</span>], res[r]</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h4 id="不修改数组找出重复的数字"><a href="#不修改数组找出重复的数字" class="headerlink" title="不修改数组找出重复的数字"></a>不修改数组找出重复的数字</h4><p><a href="https://www.acwing.com/problem/content/description/15/">题目链接</a></p><p><a href="https://www.acwing.com/solution/content/693/">二分思路的证明</a></p><p><strong>基本思路</strong></p><ol><li>按数组中元素的大小而不是数组下标分为两组，<code>[l, mid], [mid + 1, r]</code></li><li>统计左半区间中数组的数量</li><li>若大于区间长度，则说明左半区间有重复元素，将新区间更新为<code>[l, mid]</code>，反之则为<code>[mid + 1, r]</code></li></ol><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">duplicateInArray</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        l, r = <span class="number">1</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> l &lt; r:</span><br><span class="line">            mid = (l + r) // <span class="number">2</span></span><br><span class="line">            <span class="comment"># 统计左半区间元素个数</span></span><br><span class="line">            cnt = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> nums:</span><br><span class="line">                <span class="keyword">if</span> x &gt;= l <span class="keyword">and</span> x &lt;= mid:</span><br><span class="line">                    cnt += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 元素个数大于区间长度</span></span><br><span class="line">            <span class="keyword">if</span> cnt &gt; mid - l + <span class="number">1</span>:</span><br><span class="line">                r = mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> l</span><br></pre></td></tr></table></figure><hr><h3 id="浮点数二分查找"><a href="#浮点数二分查找" class="headerlink" title="浮点数二分查找"></a>浮点数二分查找</h3><p><a href="https://www.acwing.com/problem/content/792/">题目链接</a></p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n = <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="comment"># l,r赋值为题目所给数据范围边界</span></span><br><span class="line">    l, r = -<span class="number">10000</span>, <span class="number">10000</span></span><br><span class="line">    <span class="keyword">while</span> r - l &gt; <span class="number">1e-8</span>:</span><br><span class="line">        mid = (l + r) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> mid * mid * mid &gt; n:</span><br><span class="line">            r = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l = mid</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%.6f&#x27;</span> % l)</span><br></pre></td></tr></table></figure><h4 id="最佳牛围栏"><a href="#最佳牛围栏" class="headerlink" title="最佳牛围栏"></a>最佳牛围栏</h4><p><a href="https://www.acwing.com/problem/content/104/">题目链接</a></p><p><strong>基本思路</strong></p><ol><li>二分选取一个平均数</li><li><code>check</code>函数进行判断是否存在有比当前值更大的平均值存在</li><li><code>check</code>函数基本思路<ul><li>将a数组中每个数减去平均值，并求前缀和</li><li>通过判断是否存在区间范围大于等于F的区间，其和大于0，若大于0，则说明原区间内的数平均值大于当前所给平均值</li></ul></li></ol><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">100010</span></span><br><span class="line">n, m = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">a = [<span class="number">0</span>] * N</span><br><span class="line">s = [<span class="number">0</span>] * N</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">avg</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        s[i] = s[i - <span class="number">1</span>] + (a[i] - avg)</span><br><span class="line">        </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    双指针遍历前缀和数组s</span></span><br><span class="line"><span class="string">    当前区间右端点为j，mins记录j-F+1之前的s数组的最小值</span></span><br><span class="line"><span class="string">    以便求出最大的以j为区间右端点，且区间长度大于等于F的区间和</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    mins = <span class="number">0</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m, n + <span class="number">1</span>):</span><br><span class="line">        mins = <span class="built_in">min</span>(mins, s[i])</span><br><span class="line">        <span class="keyword">if</span> s[j] - mins &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">l, r = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    num = <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="comment"># 原数组中最大值为不限区间长度的平均值的最大值</span></span><br><span class="line">    r = <span class="built_in">max</span>(r, num)</span><br><span class="line">    a[i] = num</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1e-x，x比精度大2</span></span><br><span class="line"><span class="keyword">while</span> r - l &gt; <span class="number">1e-5</span>:</span><br><span class="line">    mid = (l + r) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> check(mid):</span><br><span class="line">        l = mid</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r = mid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 举例：当前r=6500.0001，l=6499.999，答案为6500，此时若选l，下取整会得到6499</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d&#x27;</span> % <span class="built_in">int</span>(r * <span class="number">1000</span>))</span><br></pre></td></tr></table></figure><hr><h3 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h3><p><a href="https://www.acwing.com/problem/content/793/">题目链接</a></p><blockquote><p>仅限于C++和Java，python直接相加即可</p></blockquote><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">l1, l2</span>):</span><br><span class="line">    <span class="comment"># 记录进位</span></span><br><span class="line">    carry = <span class="number">0</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">max</span>(<span class="built_in">len</span>(l1), <span class="built_in">len</span>(l2))):</span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(l1):</span><br><span class="line">            carry += l1[i]</span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(l2):</span><br><span class="line">            carry += l2[i]</span><br><span class="line">        <span class="comment"># 得出本位值</span></span><br><span class="line">        res.append(carry % <span class="number">10</span>)</span><br><span class="line">        <span class="comment"># 得出进位值</span></span><br><span class="line">        carry //= <span class="number">10</span></span><br><span class="line">    <span class="comment"># 最后一次进位未加</span></span><br><span class="line">    <span class="keyword">if</span> carry != <span class="number">0</span>:</span><br><span class="line">        res.append(carry)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    s1 = <span class="built_in">input</span>()</span><br><span class="line">    s2 = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 列表从低位到高位存储大整数</span></span><br><span class="line">    l1 = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> s1[::-<span class="number">1</span>]]</span><br><span class="line">    l2 = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> s2[::-<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">    ans = add(l1, l2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, ans[::-<span class="number">1</span>])))</span><br></pre></td></tr></table></figure><hr><h3 id="高精度减法"><a href="#高精度减法" class="headerlink" title="高精度减法"></a>高精度减法</h3><p><a href="https://www.acwing.com/problem/content/794/">题目链接</a></p><blockquote><p>仅限于C++和Java，python直接相减即可</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cmp</span>(<span class="params">l1, l2</span>):</span><br><span class="line">    <span class="comment"># 两个数数位不同时</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(l1) != <span class="built_in">len</span>(l2):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(l1) &gt; <span class="built_in">len</span>(l2)</span><br><span class="line">    <span class="comment"># 两个数数位相同时，从高位到低位依次比较</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(l1) - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> l1[i] != l2[i]:</span><br><span class="line">            <span class="keyword">return</span> l1[i] &gt; l2[i]</span><br><span class="line">    <span class="comment"># 位数相同且各位数全相同时</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub</span>(<span class="params">l1, l2</span>):</span><br><span class="line">    res = []</span><br><span class="line">    <span class="comment"># 表示借位</span></span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(l1)):</span><br><span class="line">        t = l1[i] - t</span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(l2):</span><br><span class="line">            t -= l2[i]</span><br><span class="line">        res.append((t + <span class="number">10</span>) % <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> t &lt; <span class="number">0</span>:</span><br><span class="line">            t = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            t = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 去除多余的0，至少保留一个</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(res) &gt; <span class="number">1</span> <span class="keyword">and</span> res[<span class="built_in">len</span>(res) - <span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">        res.pop()</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    s1 = <span class="built_in">input</span>()</span><br><span class="line">    s2 = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 列表从低位到高位存储大整数</span></span><br><span class="line">    l1 = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> s1[::-<span class="number">1</span>]]</span><br><span class="line">    l2 = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> s2[::-<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">    ans = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第一个数大于等于第二个数</span></span><br><span class="line">    <span class="keyword">if</span> cmp(l1, l2):</span><br><span class="line">        ans = sub(l1, l2)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, ans[::-<span class="number">1</span>])))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 交换相减顺序，开头加入负号</span></span><br><span class="line">        ans = sub(l2, l1)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, ans[::-<span class="number">1</span>])))</span><br></pre></td></tr></table></figure><hr><h3 id="高精度乘法"><a href="#高精度乘法" class="headerlink" title="高精度乘法"></a>高精度乘法</h3><p><a href="https://www.acwing.com/problem/content/795/">题目链接</a></p><blockquote><p>仅限于C++和Java，python直接相乘即可</p></blockquote><blockquote><p>此处第一个数为大整数，第二个数为正常数据范围内的数</p></blockquote><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">l, b</span>):</span><br><span class="line">    res = []</span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> l:</span><br><span class="line">        t += val * b</span><br><span class="line">        res.append(t % <span class="number">10</span>)</span><br><span class="line">        t //= <span class="number">10</span></span><br><span class="line">    <span class="comment"># 将最后一次进位加上</span></span><br><span class="line">    <span class="keyword">if</span> t:</span><br><span class="line">        res.append(t)</span><br><span class="line">    <span class="comment"># 去掉最高位的0</span></span><br><span class="line">    <span class="comment"># 例如当a=10，b=0时，会出现结果为00的情况</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(res) &gt; <span class="number">1</span> <span class="keyword">and</span> res[<span class="built_in">len</span>(res) - <span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">        res.pop()</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = <span class="built_in">input</span>()</span><br><span class="line">    b = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将大整数从低位到高位排列</span></span><br><span class="line">    l = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> a[::-<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">    ans = mul(l, b)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, ans[::-<span class="number">1</span>])))</span><br></pre></td></tr></table></figure><hr><h3 id="高精度除法"><a href="#高精度除法" class="headerlink" title="高精度除法"></a>高精度除法</h3><p><a href="https://www.acwing.com/problem/content/796/">题目链接</a></p><blockquote><p>仅限于C++和Java，python直接相除即可</p></blockquote><blockquote><p>此处第一个数为大整数，第二个数为正常数据范围内的数</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">div</span>(<span class="params">l, b, r</span>):</span><br><span class="line">    res = []</span><br><span class="line">    <span class="comment"># 从高位开始处理</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(l) - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        r = r * <span class="number">10</span> + l[i]</span><br><span class="line">        res.append(r // b)</span><br><span class="line">        r %= b</span><br><span class="line">    res = res[::-<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 防止结果中前缀0的出现</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(res) &gt; <span class="number">1</span> <span class="keyword">and</span> res[<span class="built_in">len</span>(res) - <span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">        res.pop()</span><br><span class="line">    <span class="keyword">return</span> res, r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    s = <span class="built_in">input</span>()</span><br><span class="line">    b = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从低位到高位排序</span></span><br><span class="line">    l = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> s[::-<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># r记录余数</span></span><br><span class="line">    ans, r = div(l, b, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, ans[::-<span class="number">1</span>])))</span><br><span class="line">    <span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><hr><h3 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h3><p><a href="https://www.acwing.com/problem/content/797/">题目链接</a></p><p><strong>核心步骤</strong></p><ul><li><p>初始化前缀和数组</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在数组上直接自加成前缀和数组</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    a[i] += a[i - <span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 新开s数组为a数组的前缀和数组</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    s[i] = s[i - <span class="number">1</span>] + a[i]</span><br></pre></td></tr></table></figure></li><li><p>得出从第l个数加到第r个数的和<code>s[r] - s[l - 1]</code></p></li></ul><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接开题目中规定的最大范围的数组</span></span><br><span class="line">N = <span class="number">100010</span></span><br><span class="line"><span class="comment"># 下标均从1开始</span></span><br><span class="line">a = [<span class="number">0</span>] * N</span><br><span class="line">s = [<span class="number">0</span>] * N</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    a[<span class="number">1</span>:n + <span class="number">1</span>] = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 初始化前缀和数组</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        s[i] = s[i - <span class="number">1</span>] + a[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        l, r = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">        <span class="comment"># 得出从第l个数加到第r个数的总和</span></span><br><span class="line">        <span class="built_in">print</span>(s[r] - s[l - <span class="number">1</span>])</span><br></pre></td></tr></table></figure><hr><h3 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h3><p><a href="https://www.acwing.com/problem/content/798/">题目链接</a></p><p><strong>核心步骤</strong></p><ul><li><p>初始化前缀和数组</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将原数组本身变为前缀和数组</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">        a[i][j] += a[i - <span class="number">1</span>][j] + a[i][j - <span class="number">1</span>] - a[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 新开s数组为a数组前缀和</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">        s[i][j] = s[i - <span class="number">1</span>][j] + s[i][j - <span class="number">1</span>] - s[i - <span class="number">1</span>][j - <span class="number">1</span>] + a[i][j]</span><br></pre></td></tr></table></figure></li><li><p>求区间内数之和<code>s[x2][y2] - s[x1 - 1][y2] - s[x2][y1 - 1] + s[x1 - 1][y1 - 1]</code></p></li></ul><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">1010</span></span><br><span class="line">a = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N)]</span><br><span class="line">s = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n, m, q = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        a[i][<span class="number">1</span>:m + <span class="number">1</span>] = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化前缀和数组</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">            s[i][j] = s[i - <span class="number">1</span>][j] + s[i][j - <span class="number">1</span>] - s[i - <span class="number">1</span>][j - <span class="number">1</span>] + a[i][j]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求区间内数之和</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(q):</span><br><span class="line">        x1, y1, x2, y2 = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">        <span class="built_in">print</span>(s[x2][y2] - s[x1 - <span class="number">1</span>][y2] - s[x2][y1 - <span class="number">1</span>] + s[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>])</span><br></pre></td></tr></table></figure><h4 id="激光炸弹"><a href="#激光炸弹" class="headerlink" title="激光炸弹"></a>激光炸弹</h4><p><a href="https://www.acwing.com/problem/content/101/">题目链接</a></p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">5001</span>  <span class="comment"># 0≤Xi,Yi≤5000，范围是5001*5001的矩阵</span></span><br><span class="line">n, r = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">s = [[<span class="number">0</span>] * (N + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N + <span class="number">1</span>)]  <span class="comment"># 下标从1开始，因为是5001*5001的矩阵，所以二维数组大小为s[5002][5002]</span></span><br><span class="line"></span><br><span class="line">r = <span class="built_in">min</span>(r, N)  <span class="comment"># 炸弹范围超过物品所在地范围，缩小到物品所在地的最大范围5001</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    x, y, w = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    x += <span class="number">1</span></span><br><span class="line">    y += <span class="number">1</span></span><br><span class="line">    s[x][y] += w</span><br><span class="line"></span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, N + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, N + <span class="number">1</span>):</span><br><span class="line">        s[i][j] += s[i - <span class="number">1</span>][j] + s[i][j - <span class="number">1</span>] - s[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">        <span class="comment"># 枚举炸弹范围右下角</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= r <span class="keyword">and</span> j &gt;= r:</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, s[i][j] - s[i - r][j] - s[i][j - r] + s[i - r][j - r])</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><hr><h3 id="一维差分"><a href="#一维差分" class="headerlink" title="一维差分"></a>一维差分</h3><p><a href="https://www.acwing.com/problem/content/799/">题目链接</a></p><p><strong>功能</strong><code>适用于给定一组数，在对应区间上进行加减</code></p><p><strong>核心步骤</strong></p><ul><li><p>差分函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">l, r, c</span>):</span><br><span class="line">    b[l] += c</span><br><span class="line">    b[r + <span class="number">1</span>] -= c</span><br></pre></td></tr></table></figure></li><li><p>获取原数组的差分数组</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将a数组本身变为其差分数组</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n, <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    a[i] -= a[i - <span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 得到a的差分数组b</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    insert(i, i, a[i])</span><br></pre></td></tr></table></figure></li></ul><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">100010</span></span><br><span class="line">a = [<span class="number">0</span>] * N  <span class="comment"># 存储原数组，也为前缀和数组</span></span><br><span class="line">b = [<span class="number">0</span>] * N  <span class="comment"># 存储原数组的差分数组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 差分函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">l, r, c</span>):</span><br><span class="line">    b[l] += c</span><br><span class="line">    b[r + <span class="number">1</span>] -= c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下标从1开始</span></span><br><span class="line">    a[<span class="number">1</span>:n + <span class="number">1</span>] = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 得到a的差分数组b</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        insert(i, i, a[i])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行m次操作</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        l, r, c = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">        insert(l, r, c)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将b数组变为其自身的前缀和数组</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        b[i] += b[i - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, b[<span class="number">1</span>:n + <span class="number">1</span>])))</span><br></pre></td></tr></table></figure><h4 id="增减序列"><a href="#增减序列" class="headerlink" title="增减序列"></a>增减序列</h4><p><a href="https://www.acwing.com/problem/content/102/">题目链接</a></p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">由题意得在数组a的区间范围上集体加一或减一，使得a中所有元素大小相同</span></span><br><span class="line"><span class="string">b为a的差分数组</span></span><br><span class="line"><span class="string">等价于将b数组的2-n个数全部变为0，此时b的前缀和数组a中所有的值皆为b[1]</span></span><br><span class="line"><span class="string">每次对a的区间的操作等价于对b中2-n个数中的两个数一个加一一个减一</span></span><br><span class="line"><span class="string">现2-n个数中有x个正数，y个负数</span></span><br><span class="line"><span class="string">一个正数一个负数两两一组构成min(x,y)次操作</span></span><br><span class="line"><span class="string">此时b数组中第2-n个数符号相同</span></span><br><span class="line"><span class="string">可通过2-n中的非0数和b[n+1]或b[1]一组来得到不同的b[1]值</span></span><br><span class="line"><span class="string">此时b[1]值共有abs(x-y)+1种</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">a = [<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    a.append(<span class="built_in">int</span>(<span class="built_in">input</span>()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n, <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    a[i] -= a[i - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">x, y = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> a[i] &gt; <span class="number">0</span>:</span><br><span class="line">        x += a[i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        y -= a[i]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(x, y) + <span class="built_in">abs</span>(x - y))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">abs</span>(x - y) + <span class="number">1</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h3><p><a href="https://www.acwing.com/problem/content/800/">题目链接</a></p><p><strong>核心步骤</strong></p><ul><li><p>差分函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">x1, y1, x2, y2, c</span>):</span><br><span class="line">    b[x1][y1] += c</span><br><span class="line">    b[x1][y2 + <span class="number">1</span>] -= c</span><br><span class="line">    b[x2 + <span class="number">1</span>][y1] -= c</span><br><span class="line">    b[x2 + <span class="number">1</span>][y2 + <span class="number">1</span>] += c</span><br></pre></td></tr></table></figure></li><li><p>获取原数组差分数组</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">        insert(i, j, i, j, a[i][j])</span><br></pre></td></tr></table></figure></li></ul><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">1010</span></span><br><span class="line">a = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N)]  <span class="comment"># 存储原数组，也就是前缀和数组</span></span><br><span class="line">b = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N)]  <span class="comment"># 存储差分数组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 差分函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">x1, y1, x2, y2, c</span>):</span><br><span class="line">    b[x1][y1] += c</span><br><span class="line">    b[x1][y2 + <span class="number">1</span>] -= c</span><br><span class="line">    b[x2 + <span class="number">1</span>][y1] -= c</span><br><span class="line">    b[x2 + <span class="number">1</span>][y2 + <span class="number">1</span>] += c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n, m, q = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        a[i][<span class="number">1</span>:m + <span class="number">1</span>] = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化差分数组b</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">            insert(i, j, i, j, a[i][j])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(q):</span><br><span class="line">        x1, y1, x2, y2, c = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">        insert(x1, y1, x2, y2, c)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将b数组变为其自身的前缀和数组</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">            b[i][j] += b[i - <span class="number">1</span>][j] + b[i][j - <span class="number">1</span>] - b[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, b[i][<span class="number">1</span>:m + <span class="number">1</span>])))</span><br></pre></td></tr></table></figure><hr><h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><h4 id="最长连续不重复子序列"><a href="#最长连续不重复子序列" class="headerlink" title="最长连续不重复子序列"></a>最长连续不重复子序列</h4><p><a href="https://www.acwing.com/problem/content/801/">题目链接</a></p><p><strong>代码1</strong></p><blockquote><p>采用<code>cnt</code>数组记录每个数出现的次数</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    N = <span class="number">100010</span>  <span class="comment"># 数的最大值不超过N</span></span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">    ans = <span class="number">0</span>  <span class="comment"># 保存最大长度结果</span></span><br><span class="line">    cnt = [<span class="number">0</span>] * N  <span class="comment"># cnt[i]为i出现的次数</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">        cnt[a[i]] += <span class="number">1</span></span><br><span class="line">        <span class="comment"># a[i]重复，j指针移动到a[i]仅有一个为止</span></span><br><span class="line">        <span class="keyword">while</span> cnt[a[i]] &gt; <span class="number">1</span>:</span><br><span class="line">            cnt[a[j]] -= <span class="number">1</span></span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        ans = <span class="built_in">max</span>(ans, i - j + <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><p><strong>代码2</strong></p><blockquote><p>采用<code>dict</code>存储每个数出现的次数</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    N = <span class="number">100010</span>  <span class="comment"># 数的最大值不超过N</span></span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 将a数组的所有元素作为key，所有key对应的value皆为0</span></span><br><span class="line">    cnt = <span class="built_in">dict</span>.fromkeys(a, <span class="number">0</span>) </span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">        cnt[a[i]] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> cnt[a[i]] &gt; <span class="number">1</span>:</span><br><span class="line">            cnt[a[j]] -= <span class="number">1</span></span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        ans = <span class="built_in">max</span>(ans, i - j + <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><h4 id="数组元素的目标和"><a href="#数组元素的目标和" class="headerlink" title="数组元素的目标和"></a>数组元素的目标和</h4><p><a href="https://www.acwing.com/problem/content/802/">题目链接</a></p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基于两个数组都为递增数组的情况下</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n, m, target = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    b = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对撞指针i,j</span></span><br><span class="line">    i, j = <span class="number">0</span>, m - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">        <span class="comment"># 和大于目标值则右指针左移</span></span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> a[i] + b[j] &gt; target:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查此时和是否等于目标值</span></span><br><span class="line">        <span class="keyword">if</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> a[i] + b[j] == target:</span><br><span class="line">            <span class="built_in">print</span>(i, j)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h4 id="判断子序列"><a href="#判断子序列" class="headerlink" title="判断子序列"></a>判断子序列</h4><p><a href="https://www.acwing.com/problem/content/2818/">题目链接</a></p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    b = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># i指针指向a，j指针指向b</span></span><br><span class="line">    j, cnt = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">        <span class="keyword">while</span> j &lt; m <span class="keyword">and</span> a[i] != b[j]:</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> j &lt; m <span class="keyword">and</span> a[i] == b[j]:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> cnt == n:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Yes&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;No&#x27;</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><p><a href="https://www.acwing.com/problem/content/803/">题目链接</a></p><p><strong>功能</strong><code>计算出一个数二进制中所含1的数量</code></p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算出x的二进制最右边一个1及其往后的数字所构成的数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lowbit</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x  <span class="comment"># -x为x的取反+1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        x = a[i]</span><br><span class="line">        <span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">            x -= lowbit(x)</span><br><span class="line">            ans += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(ans, end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h3><p><a href="https://www.acwing.com/problem/content/805/">题目链接</a></p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 两种不同的读入方式</span></span><br><span class="line">    <span class="comment"># a = []</span></span><br><span class="line">    <span class="comment"># for _ in range(n):</span></span><br><span class="line">    <span class="comment">#     a.append(list(map(int, input().split())))</span></span><br><span class="line"></span><br><span class="line">    a = [[<span class="number">0</span>] * <span class="number">2</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        a[i][<span class="number">0</span>], a[i][<span class="number">1</span>] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 按区间的左端点从小到大排序</span></span><br><span class="line">    a.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])  <span class="comment"># lambda匿名函数</span></span><br><span class="line">    start, end = a[<span class="number">0</span>][<span class="number">0</span>], a[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">    ans = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        <span class="comment"># 新区间左端点大于原区间右端点</span></span><br><span class="line">        <span class="keyword">if</span> a[i][<span class="number">0</span>] &gt; end:</span><br><span class="line">            ans += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 更新区间左右端点</span></span><br><span class="line">            start, end = a[i][<span class="number">0</span>], a[i][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 新区间与原区间有交集，更新区间右端点</span></span><br><span class="line">            end = <span class="built_in">max</span>(end, a[i][<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><hr><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="经典例题引导"><a href="#经典例题引导" class="headerlink" title="经典例题引导"></a>经典例题引导</h3><h4 id="数字三角形"><a href="#数字三角形" class="headerlink" title="数字三角形"></a>数字三角形</h4><p><a href="https://www.luogu.com.cn/problem/P1216">题目链接</a></p><ul><li><p><strong><code>dfs</code></strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">1010</span></span><br><span class="line">r = <span class="number">0</span></span><br><span class="line">g = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">if</span> x &gt; r <span class="keyword">or</span> y &gt; r:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(dfs(x + <span class="number">1</span>, y), dfs(x + <span class="number">1</span>, y + <span class="number">1</span>)) + g[x][y]</span><br><span class="line"></span><br><span class="line">r = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, r + <span class="number">1</span>):</span><br><span class="line">    g[i][<span class="number">1</span>:i + <span class="number">1</span>] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">ans = dfs(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure></li><li><p><strong>记忆化</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">1010</span></span><br><span class="line">r = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">g = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N)]</span><br><span class="line">f = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">if</span> f[x][y]:</span><br><span class="line">        <span class="keyword">return</span> f[x][y]</span><br><span class="line">    <span class="keyword">if</span> x &gt; r <span class="keyword">or</span> y &gt; r:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    f[x][y] = <span class="built_in">max</span>(dfs(x + <span class="number">1</span>, y), dfs(x + <span class="number">1</span>, y + <span class="number">1</span>)) + g[x][y]</span><br><span class="line">    <span class="keyword">return</span> f[x][y]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, r + <span class="number">1</span>):</span><br><span class="line">    g[i][<span class="number">1</span>:i + <span class="number">1</span>] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">ans = dfs(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure></li><li><p><strong>动态规划</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">1010</span></span><br><span class="line">r = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">g = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N)]</span><br><span class="line">f = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, r + <span class="number">1</span>):</span><br><span class="line">    g[i][<span class="number">1</span>:i + <span class="number">1</span>] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, r + <span class="number">1</span>):</span><br><span class="line">        f[i][j] = <span class="built_in">max</span>(f[i + <span class="number">1</span>][j], f[i + <span class="number">1</span>][j + <span class="number">1</span>]) + g[i][j]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f[<span class="number">1</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure></li></ul><h4 id="大盗阿福"><a href="#大盗阿福" class="headerlink" title="大盗阿福"></a>大盗阿福</h4><p><a href="https://www.acwing.com/problem/content/1051/">题目链接</a></p><ul><li><p><strong><code>dfs</code></strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">100010</span></span><br><span class="line">money = [<span class="number">0</span>] * N</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x &gt; n:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(dfs(x + <span class="number">1</span>), dfs(x + <span class="number">2</span>) + money[x])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">T = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(T):</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    money[<span class="number">1</span>:n + <span class="number">1</span>] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    ans = dfs(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure></li><li><p><strong>记忆化</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">100010</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line">money = [<span class="number">0</span>] * N</span><br><span class="line">f = [<span class="number">0</span>] * N</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> f[x]:</span><br><span class="line">        <span class="keyword">return</span> f[x]</span><br><span class="line">    <span class="keyword">if</span> x &gt; n:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    f[x] = <span class="built_in">max</span>(dfs(x + <span class="number">1</span>), dfs(x + <span class="number">2</span>) + money[x])</span><br><span class="line">    <span class="keyword">return</span> f[x]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">T = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(T):</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    money[<span class="number">1</span>:n + <span class="number">1</span>] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    ans = dfs(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(ans)</span><br><span class="line">    f = [<span class="number">0</span>] * N</span><br></pre></td></tr></table></figure></li><li><p><strong>动态规划</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">100010</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line">money = [<span class="number">0</span>] * N</span><br><span class="line">f = [<span class="number">0</span>] * N</span><br><span class="line"></span><br><span class="line">T = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(T):</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    money[<span class="number">1</span>:n + <span class="number">1</span>] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        f[i] = <span class="built_in">max</span>(f[i + <span class="number">1</span>], f[i + <span class="number">2</span>] + money[i])</span><br><span class="line">    <span class="built_in">print</span>(f[<span class="number">1</span>])</span><br><span class="line">    f = [<span class="number">0</span>] * N</span><br></pre></td></tr></table></figure></li></ul><h3 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h3><h4 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h4><p><a href="https://www.acwing.com/problem/content/description/2/">题目链接</a></p><ul><li><p><strong><code>dfs</code></strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">1010</span></span><br><span class="line">n, m = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">v = [<span class="number">0</span>] * N</span><br><span class="line">w = [<span class="number">0</span>] * N</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">u, spare_v</span>):</span><br><span class="line">    <span class="keyword">if</span> u &gt; n:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> spare_v &lt; v[u]:</span><br><span class="line">        <span class="keyword">return</span> dfs(u + <span class="number">1</span>, spare_v)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(dfs(u + <span class="number">1</span>, spare_v - v[u]) + w[u], dfs(u + <span class="number">1</span>, spare_v))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    v[i], w[i] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dfs(<span class="number">1</span>, m))</span><br></pre></td></tr></table></figure></li><li><p><strong>记忆化</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">1010</span></span><br><span class="line">n, m = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">v = [<span class="number">0</span>] * N</span><br><span class="line">w = [<span class="number">0</span>] * N</span><br><span class="line">f = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">u, spare_v</span>):</span><br><span class="line">    <span class="keyword">if</span> f[u][spare_v]:</span><br><span class="line">        <span class="keyword">return</span> f[u][spare_v]</span><br><span class="line">    <span class="keyword">if</span> u &gt; n:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> spare_v &lt; v[u]:</span><br><span class="line">        f[u][spare_v] = dfs(u + <span class="number">1</span>, spare_v)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f[u][spare_v] = <span class="built_in">max</span>(dfs(u + <span class="number">1</span>, spare_v - v[u]) + w[u], dfs(u + <span class="number">1</span>, spare_v))</span><br><span class="line">    <span class="keyword">return</span> f[u][spare_v]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    v[i], w[i] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dfs(<span class="number">1</span>, m))</span><br></pre></td></tr></table></figure></li><li><p><strong>动态规划（未降维）</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">1010</span></span><br><span class="line">n, m = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">v = [<span class="number">0</span>] * N</span><br><span class="line">w = [<span class="number">0</span>] * N</span><br><span class="line">f = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N)]</span><br><span class="line"></span><br><span class="line">n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    v[i], w[i] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, m + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> j &lt; v[i]:</span><br><span class="line">            f[i][j] = f[i + <span class="number">1</span>][j]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            f[i][j] = <span class="built_in">max</span>(f[i + <span class="number">1</span>][j], f[i + <span class="number">1</span>][j - v[i]] + w[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f[<span class="number">1</span>][m])</span><br></pre></td></tr></table></figure></li><li><p><strong>动态规划（已降维）</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">1010</span></span><br><span class="line">n, m = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">v = [<span class="number">0</span>] * N</span><br><span class="line">w = [<span class="number">0</span>] * N</span><br><span class="line">f = [<span class="number">0</span>] * N</span><br><span class="line"></span><br><span class="line">n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    v[i], w[i] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m, v[i] - <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        f[j] = <span class="built_in">max</span>(f[j], f[j - v[i]] + w[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f[m])</span><br></pre></td></tr></table></figure></li></ul><h4 id="二维费用的背包问题"><a href="#二维费用的背包问题" class="headerlink" title="二维费用的背包问题"></a>二维费用的背包问题</h4><p><a href="https://www.acwing.com/problem/content/description/8/">题目链接</a></p><ul><li><p><strong><code>dfs</code></strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">1010</span></span><br><span class="line"><span class="comment"># 物品数量 背包体积 背包承重</span></span><br><span class="line">n, volume, weight = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">v = [<span class="number">0</span>] * N  <span class="comment"># 体积</span></span><br><span class="line">w = [<span class="number">0</span>] * N  <span class="comment"># 重量</span></span><br><span class="line">value = [<span class="number">0</span>] * N  <span class="comment"># 价值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">u, spare_v, spare_w</span>):</span><br><span class="line">    <span class="keyword">if</span> u &gt; n:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> v[u] &gt; spare_v <span class="keyword">or</span> w[u] &gt; spare_w:</span><br><span class="line">        <span class="keyword">return</span> dfs(u + <span class="number">1</span>, spare_v, spare_w)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(dfs(u + <span class="number">1</span>, spare_v, spare_w), dfs(u + <span class="number">1</span>, spare_v - v[u], spare_w - w[u]) + value[u])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n, volume, weight = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    v[i], w[i], value[i] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dfs(<span class="number">1</span>, volume, weight))</span><br></pre></td></tr></table></figure></li><li><p><strong>记忆化</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N, M = <span class="number">1010</span>, <span class="number">110</span></span><br><span class="line"><span class="comment"># 物品数量 背包体积 背包承重</span></span><br><span class="line">n, volume, weight = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">v = [<span class="number">0</span>] * N  <span class="comment"># 体积</span></span><br><span class="line">w = [<span class="number">0</span>] * N  <span class="comment"># 重量</span></span><br><span class="line">value = [<span class="number">0</span>] * N  <span class="comment"># 价值</span></span><br><span class="line">f = [[[<span class="number">0</span>] * M <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(M)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">u, spare_v, spare_w</span>):</span><br><span class="line">    <span class="keyword">if</span> f[u][spare_v][spare_w]:</span><br><span class="line">        <span class="keyword">return</span> f[u][spare_v][spare_w]</span><br><span class="line">    <span class="keyword">if</span> u &gt; n:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> v[u] &gt; spare_v <span class="keyword">or</span> w[u] &gt; spare_w:</span><br><span class="line">        f[u][spare_v][spare_w] = dfs(u + <span class="number">1</span>, spare_v, spare_w)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f[u][spare_v][spare_w] = <span class="built_in">max</span>(dfs(u + <span class="number">1</span>, spare_v, spare_w),</span><br><span class="line">                                     dfs(u + <span class="number">1</span>, spare_v - v[u], spare_w - w[u]) + value[u])</span><br><span class="line">    <span class="keyword">return</span> f[u][spare_v][spare_w]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n, volume, weight = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    v[i], w[i], value[i] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dfs(<span class="number">1</span>, volume, weight))</span><br></pre></td></tr></table></figure></li><li><p><strong>动态规划（未降维）</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N, M = <span class="number">1010</span>, <span class="number">110</span></span><br><span class="line"><span class="comment"># 物品数量 背包体积 背包承重</span></span><br><span class="line">n, volume, weight = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">v = [<span class="number">0</span>] * N  <span class="comment"># 体积</span></span><br><span class="line">w = [<span class="number">0</span>] * N  <span class="comment"># 重量</span></span><br><span class="line">value = [<span class="number">0</span>] * N  <span class="comment"># 价值</span></span><br><span class="line">f = [[[<span class="number">0</span>] * M <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(M)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N)]</span><br><span class="line"></span><br><span class="line">n, volume, weight = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    v[i], w[i], value[i] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, volume + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, weight + <span class="number">1</span>):</span><br><span class="line">            f[i][j][k] = f[i + <span class="number">1</span>][j][k]</span><br><span class="line">            <span class="keyword">if</span> j &gt;= v[i] <span class="keyword">and</span> k &gt;= w[i]:</span><br><span class="line">                f[i][j][k] = <span class="built_in">max</span>(f[i][j][k], f[i + <span class="number">1</span>][j - v[i]][k - w[i]] + value[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f[<span class="number">1</span>][volume][weight])</span><br></pre></td></tr></table></figure></li><li><p><strong>动态规划（已降维）</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N, M = <span class="number">1010</span>, <span class="number">110</span></span><br><span class="line"><span class="comment"># 物品数量 背包体积 背包承重</span></span><br><span class="line">n, volume, weight = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">v = [<span class="number">0</span>] * N  <span class="comment"># 体积</span></span><br><span class="line">w = [<span class="number">0</span>] * N  <span class="comment"># 重量</span></span><br><span class="line">value = [<span class="number">0</span>] * N  <span class="comment"># 价值</span></span><br><span class="line">f = [[<span class="number">0</span>] * M <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(M)]</span><br><span class="line"></span><br><span class="line">n, volume, weight = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    v[i], w[i], value[i] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(volume, v[i] - <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(weight, w[i] - <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            f[j][k] = <span class="built_in">max</span>(f[j][k], f[j - v[i]][k - w[i]] + value[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f[volume][weight])</span><br></pre></td></tr></table></figure></li></ul><h4 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h4><p><a href="https://www.acwing.com/problem/content/3/">题目链接</a></p><ul><li><p><strong><code>dfs</code></strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">1010</span></span><br><span class="line">n, m = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">v = [<span class="number">0</span>] * N</span><br><span class="line">w = [<span class="number">0</span>] * N</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">u, spare_v</span>):</span><br><span class="line">    <span class="keyword">if</span> u &gt; n:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> spare_v &lt; v[u]:</span><br><span class="line">        <span class="keyword">return</span> dfs(u + <span class="number">1</span>, spare_v)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(dfs(u + <span class="number">1</span>, spare_v), dfs(u, spare_v - v[u]) + w[u])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    v[i], w[i] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dfs(<span class="number">1</span>, m))</span><br></pre></td></tr></table></figure></li><li><p><strong>记忆化</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">1010</span></span><br><span class="line">n, m = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">v = [<span class="number">0</span>] * N</span><br><span class="line">w = [<span class="number">0</span>] * N</span><br><span class="line">f = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">u, spare_v</span>):</span><br><span class="line">    <span class="keyword">if</span> u &gt; n:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> f[u][spare_v]:</span><br><span class="line">        <span class="keyword">return</span> f[u][spare_v]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> spare_v &lt; v[u]:</span><br><span class="line">        f[u][spare_v] = dfs(u + <span class="number">1</span>, spare_v)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f[u][spare_v] = <span class="built_in">max</span>(dfs(u + <span class="number">1</span>, spare_v), dfs(u, spare_v - v[u]) + w[u])</span><br><span class="line">    <span class="keyword">return</span> f[u][spare_v]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    v[i], w[i] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dfs(<span class="number">1</span>, m))</span><br></pre></td></tr></table></figure></li><li><p><strong>动态规划（未降维）</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">1010</span></span><br><span class="line">n, m = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">v = [<span class="number">0</span>] * N</span><br><span class="line">w = [<span class="number">0</span>] * N</span><br><span class="line">f = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N)]</span><br><span class="line"></span><br><span class="line">n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    v[i], w[i] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, m + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> j &lt; v[i]:</span><br><span class="line">            f[i][j] = f[i + <span class="number">1</span>][j]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            f[i][j] = <span class="built_in">max</span>(f[i + <span class="number">1</span>][j], f[i][j - v[i]] + w[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f[<span class="number">1</span>][m])</span><br></pre></td></tr></table></figure></li><li><p><strong>动态规划（已降维）</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">1010</span></span><br><span class="line">n, m = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">v = [<span class="number">0</span>] * N</span><br><span class="line">w = [<span class="number">0</span>] * N</span><br><span class="line">f = [<span class="number">0</span>] * N</span><br><span class="line"></span><br><span class="line">n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    v[i], w[i] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(v[i], m + <span class="number">1</span>):</span><br><span class="line">        f[j] = <span class="built_in">max</span>(f[j], f[j - v[i]] + w[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f[m])</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h3 id="递归实现指数型枚举"><a href="#递归实现指数型枚举" class="headerlink" title="递归实现指数型枚举"></a>递归实现指数型枚举</h3><p><a href="https://www.acwing.com/problem/content/94/">题目链接</a></p><p><strong>递归搜索树</strong></p><p><img src="https://cdn.jsdelivr.net/gh/mmppto/PicGo-demo/blog-image/200210_8befa7984a-%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2022-10-12-202858.png" alt="递归搜索树"></p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">u, n, tag</span>):</span><br><span class="line">    <span class="keyword">if</span> u &gt; n:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> tag[i]:</span><br><span class="line">                <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    dfs(u + <span class="number">1</span>, n, tag)</span><br><span class="line">    tag[u] = <span class="literal">True</span></span><br><span class="line">    dfs(u + <span class="number">1</span>, n, tag)</span><br><span class="line">    <span class="comment"># 搜索完恢复到原状态</span></span><br><span class="line">    tag[u] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">tag = [<span class="literal">False</span>] * (n + <span class="number">1</span>)</span><br><span class="line">dfs(<span class="number">1</span>, n, tag)</span><br></pre></td></tr></table></figure><h3 id="递归实现排列型枚举"><a href="#递归实现排列型枚举" class="headerlink" title="递归实现排列型枚举"></a>递归实现排列型枚举</h3><p><a href="https://www.acwing.com/problem/content/96/">题目链接</a></p><p><strong>递归搜索树</strong></p><p><img src="https://cdn.jsdelivr.net/gh/mmppto/PicGo-demo/blog-image/200210_100966104a-%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2022-10-12-210905.png"></p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">u, n, tag, path</span>):</span><br><span class="line">    <span class="keyword">if</span> u &gt; n:</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> path[<span class="number">1</span>:n + <span class="number">1</span>]:</span><br><span class="line">            <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> tag[i]:</span><br><span class="line">            tag[i] = <span class="literal">True</span></span><br><span class="line">            path.append(i)</span><br><span class="line">            dfs(u + <span class="number">1</span>, n, tag, path)</span><br><span class="line">            tag[i] = <span class="literal">False</span></span><br><span class="line">            path.pop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">tag = [<span class="literal">False</span>] * (n + <span class="number">1</span>)</span><br><span class="line">dfs(<span class="number">1</span>, n, tag, [<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h3 id="递归实现组合型枚举"><a href="#递归实现组合型枚举" class="headerlink" title="递归实现组合型枚举"></a>递归实现组合型枚举</h3><p><a href="https://www.acwing.com/problem/content/95/">题目链接</a></p><p><strong>递归搜索树</strong></p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">u, n, m, path, tag</span>):</span><br><span class="line">    <span class="keyword">if</span> u &gt; m:</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> path[<span class="number">1</span>:m + <span class="number">1</span>]:</span><br><span class="line">            <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> tag[i] <span class="keyword">and</span> i &gt; path[u - <span class="number">1</span>]:</span><br><span class="line">            tag[i] = <span class="literal">True</span></span><br><span class="line">            path.append(i)</span><br><span class="line">            dfs(u + <span class="number">1</span>, n, m, path, tag)</span><br><span class="line">            tag[i] = <span class="literal">False</span></span><br><span class="line">            path.pop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">tag = [<span class="literal">False</span>] * (n + <span class="number">1</span>)</span><br><span class="line">dfs(<span class="number">1</span>, n, m, [<span class="number">0</span>], tag)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础命令</title>
      <link href="/2023/08/11/Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/08/11/Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux基础命令"><a href="#Linux基础命令" class="headerlink" title="Linux基础命令"></a>Linux基础命令</h1><h2 id="Linux的目录结构"><a href="#Linux的目录结构" class="headerlink" title="Linux的目录结构"></a>Linux的目录结构</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027214128.png" alt="image-20221027214128453"></p><ul><li><code>/</code>，根目录是最顶级的目录了</li><li>Linux只有一个顶级目录：<code>/</code></li><li>路径描述的层次关系同样适用<code>/</code>来表示</li><li>&#x2F;home&#x2F;itheima&#x2F;a.txt，表示根目录下的home文件夹内有itheima文件夹，内有a.txt</li></ul><h2 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h2><p>功能：列出文件夹信息</p><p>语法：<code>ls [-l -h -a] [参数]</code></p><ul><li>参数：被查看的文件夹，不提供参数，表示查看当前工作目录</li><li>-l，以列表形式查看</li><li>-h，配合-l，以更加人性化的方式显示文件大小</li><li>-a，显示隐藏文件</li></ul><h3 id="隐藏文件、文件夹"><a href="#隐藏文件、文件夹" class="headerlink" title="隐藏文件、文件夹"></a>隐藏文件、文件夹</h3><p>在Linux中以<code>.</code>开头的，均是隐藏的。</p><p>默认不显示出来，需要<code>-a</code>选项才可查看到。</p><h2 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h2><p>功能：展示当前工作目录</p><p>语法：<code>pwd</code></p><h2 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h2><p>功能：切换工作目录</p><p>语法：<code>cd [目标目录]</code></p><p>参数：目标目录，要切换去的地方，不提供默认切换到<code>当前登录用户HOME目录</code></p><h2 id="HOME目录"><a href="#HOME目录" class="headerlink" title="HOME目录"></a>HOME目录</h2><p>每一个用户在Linux系统中都有自己的专属工作目录，称之为HOME目录。</p><ul><li><p>普通用户的HOME目录，默认在：<code>/home/用户名</code></p></li><li><p>root用户的HOME目录，在：<code>/root</code></p></li></ul><p>FinalShell登陆终端后，默认的工作目录就是用户的HOME目录</p><h2 id="相对路径、绝对路径"><a href="#相对路径、绝对路径" class="headerlink" title="相对路径、绝对路径"></a>相对路径、绝对路径</h2><ul><li><p>相对路径，&#x3D;&#x3D;非&#x3D;&#x3D;<code>/</code>开头的称之为相对路径</p><p>相对路径表示以<code>当前目录</code>作为起点，去描述路径，如<code>test/a.txt</code>，表示当前工作目录内的test文件夹内的a.txt文件</p></li><li><p>绝对路径，&#x3D;&#x3D;以&#x3D;&#x3D;<code>/</code>开头的称之为绝对路径</p><p>绝对路径从<code>根</code>开始描述路径</p></li></ul><h2 id="特殊路径符"><a href="#特殊路径符" class="headerlink" title="特殊路径符"></a>特殊路径符</h2><ul><li><code>.</code>，表示当前，比如.&#x2F;a.txt，表示当前文件夹内的<code>a.txt</code>文件</li><li><code>..</code>，表示上级目录，比如<code>../</code>表示上级目录，<code>../../</code>表示上级的上级目录</li><li><code>~</code>，表示用户的HOME目录，比如<code>cd ~</code>，即可切回用户HOME目录</li></ul><h2 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h2><p>功能：创建文件夹</p><p>语法：<code>mkdir [-p] 参数</code></p><ul><li>参数：被创建文件夹的路径</li><li>选项：-p，可选，表示创建前置路径</li></ul><h2 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a>touch命令</h2><p>功能：创建文件</p><p>语法：<code>touch 参数</code></p><ul><li>参数：被创建的文件路径</li></ul><h2 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h2><p>功能：查看文件内容</p><p>语法：<code>cat 参数</code></p><ul><li>参数：被查看的文件路径</li></ul><h2 id="more命令"><a href="#more命令" class="headerlink" title="more命令"></a>more命令</h2><p>功能：查看文件，可以支持翻页查看</p><p>语法：<code>more 参数</code></p><ul><li>参数：被查看的文件路径</li><li>在查看过程中：<ul><li><code>空格</code>键翻页</li><li><code>q</code>退出查看</li></ul></li></ul><h2 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h2><p>功能：复制文件、文件夹</p><p>语法：<code>cp [-r] 参数1 参数2</code></p><ul><li>参数1，被复制的</li><li>参数2，要复制去的地方</li><li>选项：-r，可选，复制文件夹使用</li></ul><p>示例：</p><ul><li>cp a.txt b.txt，复制当前目录下a.txt为b.txt</li><li>cp a.txt test&#x2F;，复制当前目录a.txt到test文件夹内</li><li>cp -r test test2，复制文件夹test到当前文件夹内为test2存在</li></ul><h2 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h2><p>功能：移动文件、文件夹</p><p>语法：<code>mv 参数1 参数2</code></p><ul><li>参数1：被移动的</li><li>参数2：要移动去的地方，参数2如果不存在，则会进行改名</li></ul><h2 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h2><p>功能：删除文件、文件夹</p><p>语法：<code>rm [-r -f] 参数...参数</code></p><ul><li>参数：支持多个，每一个表示被删除的，空格进行分隔</li><li>选项：-r，删除文件夹使用</li><li>选项：-f，强制删除，不会给出确认提示，一般root用户会用到</li></ul><blockquote><p>rm命令很危险，一定要注意，特别是切换到root用户的时候。</p></blockquote><h2 id="which命令"><a href="#which命令" class="headerlink" title="which命令"></a>which命令</h2><p>功能：查看命令的程序本体文件路径</p><p>语法：<code>which 参数</code></p><ul><li>参数：被查看的命令</li></ul><h2 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h2><p>功能：搜索文件</p><p>语法1：按文件名搜索：<code>find 路径 -name 参数</code></p><ul><li>路径，搜索的起始路径</li><li>参数，搜索的关键字，支持通配符*， 比如：<code>*</code>test表示搜索任意以test结尾的文件</li></ul><p>语法2：按文件大小搜索：<code>find 路径 -size +|-n[kMG]</code></p><ul><li>路径，搜索的起始路径</li><li>+、-表示大于和小于，n表示大小数字，kMG表示大小单位，分别为kb，MB，GB</li></ul><h2 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h2><p>功能：过滤关键字</p><p>语法：<code>grep [-n] 关键字 文件路径</code></p><ul><li>选项-n，可选，表示在结果中显示匹配的行的行号。</li><li>参数，关键字，必填，表示过滤的关键字，带有空格或其它特殊符号，建议使用””将关键字包围起来</li><li>参数，文件路径，必填，表示要过滤内容的文件路径，可作为内容输入端口</li></ul><blockquote><p>参数文件路径，可以作为管道符的输入</p></blockquote><h2 id="wc命令"><a href="#wc命令" class="headerlink" title="wc命令"></a>wc命令</h2><p>功能：统计</p><p>语法：<code>wc [-c -m -l -w] 文件路径</code></p><ul><li>选项，-c，统计bytes数量</li><li>选项，-m，统计字符数量</li><li>选项，-l，统计行数</li><li>选项，-w，统计单词数量</li><li>参数，文件路径，被统计的文件，可作为内容输入端口</li></ul><blockquote><p>参数文件路径，可作为管道符的输入</p></blockquote><h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符|"></a>管道符|</h2><p>写法：<code>|</code></p><p>功能：将符号左边的结果，作为符号右边的输入</p><p>示例：</p><p><code>cat a.txt | grep itheima</code>，将cat a.txt的结果，作为grep命令的输入，用来过滤<code>itheima</code>关键字</p><p>可以支持嵌套：</p><p><code>cat a.txt | grep itheima | grep itcast</code></p><h2 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h2><p>功能：输出内容</p><p>语法：<code>echo 参数</code></p><ul><li>参数：被输出的内容</li></ul><h2 id="反引号"><a href="#反引号" class="headerlink" title="&#96;反引号"></a>&#96;反引号</h2><p>功能：被两个反引号包围的内容，会作为命令执行</p><p>示例：</p><ul><li>echo `pwd`，会输出当前工作目录</li></ul><h2 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h2><p>功能：查看文件尾部内容</p><p>语法：<code>tail [-f] 参数</code></p><ul><li>参数：被查看的文件</li><li>选项：-f，持续跟踪文件修改</li></ul><h2 id="head命令"><a href="#head命令" class="headerlink" title="head命令"></a>head命令</h2><p>功能：查看文件头部内容</p><p>语法：<code>head [-n] 参数</code></p><ul><li>参数：被查看的文件</li><li>选项：-n，查看的行数</li></ul><h2 id="重定向符"><a href="#重定向符" class="headerlink" title="重定向符"></a>重定向符</h2><p>功能：将符号左边的结果，输出到右边指定的文件中去</p><ul><li><code>&gt;</code>，表示覆盖输出</li><li><code>&gt;&gt;</code>，表示追加输出</li></ul><h2 id="vi编辑器"><a href="#vi编辑器" class="headerlink" title="vi编辑器"></a>vi编辑器</h2><h3 id="命令模式快捷键"><a href="#命令模式快捷键" class="headerlink" title="命令模式快捷键"></a>命令模式快捷键</h3><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215841.png" alt="image-20221027215841573"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215846.png" alt="image-20221027215846581"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215849.png" alt="image-20221027215849668"></p><h3 id="底线命令快捷键"><a href="#底线命令快捷键" class="headerlink" title="底线命令快捷键"></a>底线命令快捷键</h3><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215858.png" alt="image-20221027215858967"></p><h2 id="命令的选项"><a href="#命令的选项" class="headerlink" title="命令的选项"></a>命令的选项</h2><p>我们学习的一系列Linux命令，它们所拥有的选项都是非常多的。</p><p>比如，简单的ls命令就有：-a -A -b -c -C -d -D -f -F -g -G -h -H -i -I -k -l -L -m -n -N -o -p -q -Q -r-R -s -S -t -T -u -U -v -w -x -X -1等选项，可以发现选项是极其多的。</p><p>课程中， 并不会将全部的选项都进行讲解，否则，一个ls命令就可能讲解2小时之久。</p><p>课程中，会对常见的选项进行讲解， 足够满足绝大多数的学习、工作场景。</p><h3 id="查看命令的帮助"><a href="#查看命令的帮助" class="headerlink" title="查看命令的帮助"></a>查看命令的帮助</h3><p>可以通过：<code>命令 --help</code>查看命令的帮助手册</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220005.png" alt="image-20221027220005610"></p><h3 id="查看命令的详细手册"><a href="#查看命令的详细手册" class="headerlink" title="查看命令的详细手册"></a>查看命令的详细手册</h3><p>可以通过：<code>man 命令</code>查看某命令的详细手册</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220010.png" alt="image-20221027220009949"></p><h1 id="Linux常用操作"><a href="#Linux常用操作" class="headerlink" title="Linux常用操作"></a>Linux常用操作</h1><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><ul><li>CentOS系统使用：<ul><li>yum [install remove search] [-y] 软件名称<ul><li>install 安装</li><li>remove 卸载</li><li>search 搜索</li><li>-y，自动确认</li></ul></li></ul></li><li>Ubuntu系统使用<ul><li>apt [install remove search] [-y] 软件名称<ul><li>install 安装</li><li>remove 卸载</li><li>search 搜索</li><li>-y，自动确认</li></ul></li></ul></li></ul><blockquote><p>yum 和 apt 均需要root权限</p></blockquote><h2 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h2><p>功能：控制系统服务的启动关闭等</p><p>语法：<code>systemctl start | stop | restart | disable | enable | status 服务名</code></p><ul><li>start，启动</li><li>stop，停止</li><li>status，查看状态</li><li>disable，关闭开机自启</li><li>enable，开启开机自启</li><li>restart，重启</li></ul><h2 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h2><p>功能：创建文件、文件夹软链接（快捷方式）</p><p>语法：<code>ln -s 参数1 参数2</code></p><ul><li>参数1：被链接的</li><li>参数2：要链接去的地方（快捷方式的名称和存放位置）</li></ul><h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><p>语法：<code>date [-d] [+格式化字符串]</code></p><ul><li><p>-d 按照给定的字符串显示日期，一般用于日期计算</p></li><li><p>格式化字符串：通过特定的字符串标记，来控制显示的日期格式</p><ul><li>%Y   年%y   年份后两位数字 (00..99)</li><li>%m   月份 (01..12)</li><li>%d   日 (01..31)</li><li>%H   小时 (00..23)</li><li>%M   分钟 (00..59)</li><li>%S   秒 (00..60)</li><li>%s   自 1970-01-01 00:00:00 UTC 到现在的秒数</li></ul></li></ul><p>示例：</p><ul><li><p>按照2022-01-01的格式显示日期</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220514.png" alt="image-20221027220514640"></p></li><li><p>按照2022-01-01 10:00:00的格式显示日期</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220525.png" alt="image-20221027220525625"></p></li><li><p>-d选项日期计算</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220429.png" alt="image-20221027220429831"></p><ul><li><p>支持的时间标记为：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220449.png" alt="image-20221027220449312"></p></li></ul></li></ul><h2 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h2><p>修改时区为中国时区</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220554.png" alt="image-20221027220554654"></p><h2 id="ntp"><a href="#ntp" class="headerlink" title="ntp"></a>ntp</h2><p>功能：同步时间</p><p>安装：<code>yum install -y ntp</code></p><p>启动管理：<code>systemctl start | stop | restart | status | disable | enable ntpd</code></p><p>手动校准时间：<code>ntpdate -u ntp.aliyun.com</code></p><h2 id="ip地址"><a href="#ip地址" class="headerlink" title="ip地址"></a>ip地址</h2><p>格式：a.b.c.d</p><ul><li>abcd为0~255的数字</li></ul><p>特殊IP：</p><ul><li>127.0.0.1，表示本机</li><li>0.0.0.0<ul><li>可以表示本机</li><li>也可以表示任意IP（看使用场景）</li></ul></li></ul><p>查看ip：<code>ifconfig</code></p><h2 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h2><p>功能：Linux系统的名称</p><p>查看：<code>hostname</code></p><p>设置：<code>hostnamectl set-hostname 主机名</code></p><h2 id="配置VMware固定IP"><a href="#配置VMware固定IP" class="headerlink" title="配置VMware固定IP"></a>配置VMware固定IP</h2><ol><li><p>修改VMware网络，参阅PPT，图太多</p></li><li><p>设置Linux内部固定IP</p><p>修改文件：<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code></p><p>示例文件内容：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;# 改为static，固定IP</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;ens33&quot;</span><br><span class="line">UUID=&quot;1b0011cb-0d2e-4eaa-8a11-af7d50ebc876&quot;</span><br><span class="line">DEVICE=&quot;ens33&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">IPADDR=&quot;192.168.88.131&quot;# IP地址，自己设置，要匹配网络范围</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;# 子网掩码，固定写法255.255.255.0</span><br><span class="line">GATEWAY=&quot;192.168.88.2&quot;# 网关，要和VMware中配置的一致</span><br><span class="line">DNS1=&quot;192.168.88.2&quot;# DNS1服务器，和网关一致即可</span><br></pre></td></tr></table></figure></li></ol><h2 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h2><p>功能：查看进程信息</p><p>语法：<code>ps -ef</code>，查看全部进程信息，可以搭配grep做过滤：<code>ps -ef | grep xxx</code></p><h2 id="kill命令"><a href="#kill命令" class="headerlink" title="kill命令"></a>kill命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221303.png" alt="image-20221027221303037"></p><h2 id="nmap命令"><a href="#nmap命令" class="headerlink" title="nmap命令"></a>nmap命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221241.png" alt="image-20221027221241123"></p><h2 id="netstat命令"><a href="#netstat命令" class="headerlink" title="netstat命令"></a>netstat命令</h2><p>功能：查看端口占用</p><p>用法：<code>netstat -anp | grep xxx</code></p><h2 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h2><p>测试网络是否联通</p><p>语法：<code>ping [-c num] 参数</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221129.png" alt="image-20221027221129782"></p><h2 id="wget命令"><a href="#wget命令" class="headerlink" title="wget命令"></a>wget命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221149.png" alt="image-20221027221148964"></p><h2 id="curl命令"><a href="#curl命令" class="headerlink" title="curl命令"></a>curl命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221201.png" alt="image-20221027221201079"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221210.png" alt="image-20221027221210518"></p><h2 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h2><p>功能：查看主机运行状态</p><p>语法：<code>top</code>，查看基础信息</p><p>可用选项：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221340.png" alt="image-20221027221340729"></p><p>交互式模式中，可用快捷键：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221354.png" alt="image-20221027221354137"></p><h2 id="df命令"><a href="#df命令" class="headerlink" title="df命令"></a>df命令</h2><p>查看磁盘占用</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221413.png" alt="image-20221027221413787"></p><h2 id="iostat命令"><a href="#iostat命令" class="headerlink" title="iostat命令"></a>iostat命令</h2><p>查看CPU、磁盘的相关信息</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221440.png" alt="image-20221027221439990"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221514.png" alt="image-20221027221514237"></p><h2 id="sar命令"><a href="#sar命令" class="headerlink" title="sar命令"></a>sar命令</h2><p>查看网络统计</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221545.png" alt="image-20221027221545822"></p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><ul><li>临时设置：export 变量名&#x3D;变量值</li><li>永久设置：<ul><li>针对用户，设置用户HOME目录内：<code>.bashrc</code>文件</li><li>针对全局，设置<code>/etc/profile</code></li></ul></li></ul><h3 id="PATH变量"><a href="#PATH变量" class="headerlink" title="PATH变量"></a>PATH变量</h3><p>记录了执行程序的搜索路径</p><p>可以将自定义路径加入PATH内，实现自定义命令在任意地方均可执行的效果</p><h2 id="符号"><a href="#符号" class="headerlink" title="$符号"></a>$符号</h2><p>可以取出指定的环境变量的值</p><p>语法：<code>$变量名</code></p><p>示例：</p><p><code>echo $PATH</code>，输出PATH环境变量的值</p><p><code>echo $&#123;PATH&#125;ABC</code>，输出PATH环境变量的值以及ABC</p><p>如果变量名和其它内容混淆在一起，可以使用${}</p><h2 id="压缩解压"><a href="#压缩解压" class="headerlink" title="压缩解压"></a>压缩解压</h2><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p><code>tar -zcvf 压缩包 被压缩1...被压缩2...被压缩N</code></p><ul><li>-z表示使用gzip，可以不写</li></ul><p><code>zip [-r] 参数1 参数2 参数N</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221906.png" alt="image-20221027221906247"></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p><code>tar -zxvf 被解压的文件 -C 要解压去的地方</code></p><ul><li>-z表示使用gzip，可以省略</li><li>-C，可以省略，指定要解压去的地方，不写解压到当前目录</li></ul><p><code>unzip [-d] 参数</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221939.png" alt="image-20221027221939899"></p><h2 id="su命令"><a href="#su命令" class="headerlink" title="su命令"></a>su命令</h2><p>切换用户</p><p>语法：<code>su [-] [用户]</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222021.png" alt="image-20221027222021619"></p><h2 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a>sudo命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222035.png" alt="image-20221027222035337"></p><p>比如：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">itheima ALL=(ALL)       NOPASSWD: ALL</span><br></pre></td></tr></table></figure><p>在visudo内配置如上内容，可以让itheima用户，无需密码直接使用<code>sudo</code></p><h2 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令"></a>chmod命令</h2><p>修改文件、文件夹权限</p><p>语法：<code>chmod [-R] 权限 参数</code></p><ul><li><p>权限，要设置的权限，比如755，表示：<code>rwxr-xr-x</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222157.png" alt="image-20221027222157276"></p></li><li><p>参数，被修改的文件、文件夹</p></li><li><p>选项-R，设置文件夹和其内部全部内容一样生效</p></li></ul><h2 id="chown命令"><a href="#chown命令" class="headerlink" title="chown命令"></a>chown命令</h2><p>修改文件、文件夹所属用户、组</p><p>语法：<code>chown [-R] [用户][:][用户组] 文件或文件夹</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222326.png" alt="image-20221027222326192"></p><h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222354.png" alt="image-20221027222354498"></p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222407.png" alt="image-20221027222407618"></p><h2 id="getent命令"><a href="#getent命令" class="headerlink" title="getent命令"></a>getent命令</h2><ul><li><p><code>getent group</code>，查看系统全部的用户组</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222446.png" alt="image-20221027222446514"></p></li><li><p><code>getent passwd</code>，查看系统全部的用户</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222512.png" alt="image-20221027222512274"></p></li></ul><h2 id="env命令"><a href="#env命令" class="headerlink" title="env命令"></a>env命令</h2><p>查看系统全部的环境变量</p><p>语法：<code>env</code></p>]]></content>
      
      
      <categories>
          
          <category> 工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java输入输出基础</title>
      <link href="/2023/08/08/Java%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/08/08/Java%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Java输入输出基础"><a href="#Java输入输出基础" class="headerlink" title="Java输入输出基础"></a>Java输入输出基础</h1><h2 id="Java标准输入输出"><a href="#Java标准输入输出" class="headerlink" title="Java标准输入输出"></a>Java标准输入输出</h2><ul><li><p>Scanner类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br></pre></td></tr></table></figure></li><li><p>整型输入</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> input.nextInt();</span><br></pre></td></tr></table></figure></li><li><p>浮点数输入</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">n</span> <span class="operator">=</span> input.nextDouble();</span><br><span class="line"><span class="type">float</span> <span class="variable">n</span> <span class="operator">=</span> input.nextFloat();</span><br></pre></td></tr></table></figure></li><li><p>字符输入</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> input.next().charAt(<span class="number">0</span>);</span><br></pre></td></tr></table></figure></li><li><p>字符串输入</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> input.next();</span><br><span class="line"><span class="comment">// 1、一定要读取到有效字符后才可以输入。</span></span><br><span class="line"><span class="comment">// 2、对输入有效字符之前的空白，next()方法会自动将它去掉。</span></span><br><span class="line"><span class="comment">// 3、只有输入有效字符后才将其后面的空白作为分隔符或结束符。</span></span><br><span class="line"><span class="comment">// 4、next()不能得到带有空格的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> input.nextLine();</span><br><span class="line"><span class="comment">// 1、以Enter为结束符，nextLine()方法返回的是输入回车之前的所以字符。</span></span><br><span class="line"><span class="comment">// 2、可以获得空白。</span></span><br><span class="line"><span class="comment">// 3、当使用next()输入后，再利用nextLine()输入会读取前一次输入的空格或者回车</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Java-IO流"><a href="#Java-IO流" class="headerlink" title="Java IO流"></a>Java IO流</h2><ul><li><p>算法题常用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out));</span><br><span class="line">        String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">        bw.write(x + <span class="string">&quot; &quot;</span> + y);</span><br><span class="line">        bw.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>读入输出文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;input.txt&quot;</span>));</span><br><span class="line">                <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;output.txt&quot;</span>));</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">                bw.write(line + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基础操作</title>
      <link href="/2023/08/03/Git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/08/03/Git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Git基础用法"><a href="#Git基础用法" class="headerlink" title="Git基础用法"></a>Git基础用法</h1><h2 id="Git的三个概念"><a href="#Git的三个概念" class="headerlink" title="Git的三个概念"></a>Git的三个概念</h2><ol><li>提交commit（git是一种版本控制软件，可以把一个人乃至多个人代码的变更以提交的形式做一个存储，当代码写崩的时候可以找回历史记录）</li><li>仓库repository（项目的源文件夹是一个本地仓库，也可以将项目提交到云仓库github、码云）</li><li>分支branch（多人同时在开发同一个项目，可以开辟不同的分支，各写各的，最后完成合并）</li></ol><h2 id="github下载项目命令格式"><a href="#github下载项目命令格式" class="headerlink" title="github下载项目命令格式"></a>github下载项目命令格式</h2><ol><li>复制对应项目的路径，在文件夹中右键运行Git Bash Here，然后运行下列命令</li><li>git clone 路径</li></ol><h2 id="快速上手别人的Github项目"><a href="#快速上手别人的Github项目" class="headerlink" title="快速上手别人的Github项目"></a>快速上手别人的Github项目</h2><ol><li><code>git clone </code>:该命令可将项目下载到本地</li><li>Star :star数量一定程度反应了该项目的受欢迎程度</li><li>README.md :项目基本使用方法的说明</li><li>issue :可对该项目提问题</li><li>LICENSE :该项目证书</li></ol><h2 id="找开源项目的一些途径"><a href="#找开源项目的一些途径" class="headerlink" title="找开源项目的一些途径"></a>找开源项目的一些途径</h2><ul><li><a href="https://github.com/trending/%EF%BC%88%E4%B8%80%E4%BA%9B%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%BD%9C%E8%80%85%E4%BC%9A%E5%9C%A8%E6%AD%A4%E7%BD%91%E7%AB%99%E4%B8%8A%E6%8E%A8%E8%8D%90%E8%87%AA%E5%B7%B1%E7%9A%84%E9%A1%B9%E7%9B%AE%EF%BC%89">https://github.com/trending/（一些开发项目的作者会在此网站上推荐自己的项目）</a></li><li><a href="https://github.com/521xueweihan/HelloGitHub%EF%BC%88%E6%8E%A8%E8%8D%90%EF%BC%8C%E6%AF%94%E8%BE%83%E6%9C%89%E7%9F%A5%E5%90%8D%E5%BA%A6%E7%9A%84%E9%A1%B9%E7%9B%AE%EF%BC%89">https://github.com/521xueweihan/HelloGitHub（推荐，比较有知名度的项目）</a></li><li><a href="https://github.com/ruanyf/weekly">https://github.com/ruanyf/weekly</a></li><li><a href="https://www.zhihu.com/column/mm-fe%EF%BC%88b%E7%AB%99%E5%86%AF%E9%9B%A8%EF%BC%8C%E5%81%8F%E5%89%8D%E7%AB%AF%EF%BC%89">https://www.zhihu.com/column/mm-fe（b站冯雨，偏前端）</a></li></ul><h2 id="常用命令总结"><a href="#常用命令总结" class="headerlink" title="常用命令总结"></a>常用命令总结</h2><h3 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h3>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone &lt;git地址&gt;</span><br></pre></td></tr></table></figure><h3 id="初始化仓库（可使普通文件夹变为仓库）"><a href="#初始化仓库（可使普通文件夹变为仓库）" class="headerlink" title="初始化仓库（可使普通文件夹变为仓库）"></a>初始化仓库（可使普通文件夹变为仓库）</h3>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h3 id="添加文件至暂存区（所有文件）"><a href="#添加文件至暂存区（所有文件）" class="headerlink" title="添加文件至暂存区（所有文件）"></a>添加文件至暂存区（所有文件）</h3><ul><li><p>鼠标操作：在vscode源代码管理里面的更改 点击+来选择文件进入暂存区</p></li><li><p>命令操作：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add -A</span><br></pre></td></tr></table></figure></li></ul><h3 id="将暂存区的文件提交到仓库"><a href="#将暂存区的文件提交到仓库" class="headerlink" title="将暂存区的文件提交到仓库"></a>将暂存区的文件提交到仓库</h3><ul><li><p>鼠标操作：在vscode里面输入提交信息后点击提交</p></li><li><p>命令操作：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;提交信息&quot;</span><br></pre></td></tr></table></figure></li></ul><h3 id="查看提交的历史"><a href="#查看提交的历史" class="headerlink" title="查看提交的历史"></a>查看提交的历史</h3><ul><li><p>鼠标操作：在vscode里面的COMMITS进行查看</p></li><li><p>命令操作：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log --stat</span><br></pre></td></tr></table></figure></li></ul><h3 id="工作区回滚"><a href="#工作区回滚" class="headerlink" title="工作区回滚"></a>工作区回滚</h3><ul><li><p>鼠标操作：直接在vscode的更改里面点击放弃更改</p></li><li><p>命令操作：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout 文件名</span><br></pre></td></tr></table></figure></li></ul><h3 id="撤回最后一次提交"><a href="#撤回最后一次提交" class="headerlink" title="撤回最后一次提交"></a>撤回最后一次提交</h3><ul><li><p>鼠标操作：右击上传的COMMITS，点击Undo Commit，先在暂存区里面取消修改，再在工作区取消修改</p></li><li><p>命令操作：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset HEAD^1</span><br></pre></td></tr></table></figure><p>输入完命令后可以鼠标点击进行工作区回滚</p></li></ul><h3 id="查看文件修改历史"><a href="#查看文件修改历史" class="headerlink" title="查看文件修改历史"></a>查看文件修改历史</h3><pre><code>在GitLens Inspect中的FILE HISTORY查看文件的修改历史</code></pre><h3 id="以当前分支为基础新建分支"><a href="#以当前分支为基础新建分支" class="headerlink" title="以当前分支为基础新建分支"></a>以<strong>当前分支为基础</strong>新建分支</h3>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b &lt;branchname&gt;</span><br></pre></td></tr></table></figure><h3 id="单纯地切换到某个分支"><a href="#单纯地切换到某个分支" class="headerlink" title="单纯地切换到某个分支"></a>单纯地切换到某个分支</h3>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout &lt;branchname&gt;</span><br></pre></td></tr></table></figure><h3 id="列举所有的分支"><a href="#列举所有的分支" class="headerlink" title="列举所有的分支"></a>列举所有的分支</h3>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><h3 id="合并分支："><a href="#合并分支：" class="headerlink" title="合并分支："></a>合并分支：</h3>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge &lt;branchname&gt;</span><br></pre></td></tr></table></figure><h3 id="删掉特定的分支："><a href="#删掉特定的分支：" class="headerlink" title="删掉特定的分支："></a>删掉特定的分支：</h3>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -D &lt;branchname&gt;</span><br></pre></td></tr></table></figure><h3 id="Git和GitHub远程仓库："><a href="#Git和GitHub远程仓库：" class="headerlink" title="Git和GitHub远程仓库："></a>Git和GitHub远程仓库：</h3><h4 id="推送当前分支最新的提交到远程"><a href="#推送当前分支最新的提交到远程" class="headerlink" title="推送当前分支最新的提交到远程"></a>推送当前分支最新的提交到远程</h4>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><h4 id="拉取远程分支最新的提交到本地"><a href="#拉取远程分支最新的提交到本地" class="headerlink" title="拉取远程分支最新的提交到本地"></a>拉取远程分支最新的提交到本地</h4>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><hr><p><a href="https://www.bilibili.com/video/BV1db4y1d79C/?vd_source=215cdb36a563de166c1db59d0e6cea0d">参考视频</a></p><p><img src="https://cdn.jsdelivr.net/gh/mmppto/PicGo-demo/blog-image/bilibili-git.png" alt="视频导航"></p>]]></content>
      
      
      <categories>
          
          <category> 工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图论</title>
      <link href="/2023/07/25/Algorithm/"/>
      <url>/2023/07/25/Algorithm/</url>
      
        <content type="html"><![CDATA[<h2 id="最短路问题"><a href="#最短路问题" class="headerlink" title="最短路问题"></a>最短路问题</h2><p><img src="https://cdn.acwing.com/media/article/image/2022/08/03/200210_914f4a5512-%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2022-08-03-112049.png" alt="屏幕截图 2022-08-03 112049.png"></p><hr><blockquote><p>补充：点数n，边数m<br>当m&#x3D;n时，为稀疏图，用邻接表存储<br>当m&#x3D;n^2时，为稠密图，用邻接矩阵存储</p></blockquote><hr><h3 id="朴素的Dijkstra算法"><a href="#朴素的Dijkstra算法" class="headerlink" title="朴素的Dijkstra算法"></a>朴素的Dijkstra算法</h3><hr><p><strong>算法思路：</strong></p><ul><li><strong>注意状态不要忘记更新</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">点数：n   边数：m</span><br><span class="line">1. 初始化除起点之外的其他点到起点距离为正无穷，起点到起点距离为0。且无任何点被确定为最小距离</span><br><span class="line">2. 进行n次迭代，每次迭代选择未被确认最小距离的点中距离起点距离最小的那个点</span><br><span class="line">3. 使用得到的那个点更新所有距离</span><br><span class="line">4. 将此点标记为已经确定最小距离的点</span><br><span class="line">5. 进行下一次迭代</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n, m;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">510</span>, max = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="comment">// grid[i][j]存储从点i到点j的距离</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[][] grid = <span class="keyword">new</span> <span class="title class_">int</span>[N][N];</span><br><span class="line">    <span class="comment">// dist[i]存储i到点1的距离</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] dist = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="comment">// 判断此点是否已经成为最小路径</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span>[] tag = <span class="keyword">new</span> <span class="title class_">boolean</span>[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line">        m = sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            Arrays.fill(grid[i], max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> x, y, z;</span><br><span class="line">        <span class="keyword">while</span> (m-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            x = sc.nextInt();</span><br><span class="line">            y = sc.nextInt();</span><br><span class="line">            z = sc.nextInt();</span><br><span class="line">            <span class="comment">// 因为求最短距离，即使有重边，选择最短的那条即可</span></span><br><span class="line">            grid[x][y] = Math.min(grid[x][y], z);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.print(dijkstra());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">dijkstra</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化数组dist，除了dist[1]距离为0，其余皆为正无穷（很大的数）</span></span><br><span class="line">        Arrays.fill(dist, max);</span><br><span class="line">        dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// n次迭代</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 寻找未被确定最短路径的距离中，最小的那个</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!tag[j] &amp;&amp; (t == -<span class="number">1</span> || dist[j] &lt; dist[t])) &#123;</span><br><span class="line">                    t = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            tag[t] = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 使用找出的最小距离，更新其他所有点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                dist[j] = Math.min(dist[j], dist[t] + grid[t][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1无法到达此点</span></span><br><span class="line">        <span class="keyword">if</span> (dist[n] == max) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> dist[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆优化Dijkstra算法"><a href="#堆优化Dijkstra算法" class="headerlink" title="堆优化Dijkstra算法"></a>堆优化Dijkstra算法</h3><hr><p><strong>Java集合中的优先队列：<code>Queue&lt;&gt; heap = new PriortyQueue&lt;&gt;(排列顺序)</code></strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">150010</span>, max = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="comment">// m=n时，用邻接表存储</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] h = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] e = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] ne = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="comment">// 记录两个点之间距离（权重）</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] w = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="comment">// 记录距离</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] dist = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n,m,idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span>[] tag = <span class="keyword">new</span> <span class="title class_">boolean</span>[N];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line">        m = sc.nextInt();</span><br><span class="line">        <span class="type">int</span> x, y, z;</span><br><span class="line">        Arrays.fill(h, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (m-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            x = sc.nextInt();</span><br><span class="line">            y = sc.nextInt();</span><br><span class="line">            z = sc.nextInt();</span><br><span class="line">            add(x, y, z);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(dijkstra());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> &#123;</span><br><span class="line">        e[idx] = y;</span><br><span class="line">        w[idx] = z;</span><br><span class="line">        ne[idx] = h[x];</span><br><span class="line">        h[x] = idx++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">dijkstra</span><span class="params">()</span> &#123;</span><br><span class="line">        Arrays.fill(dist, max);</span><br><span class="line">        dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 堆在java集合中为优先队列  &#123;i，j&#125;i为距离，j为编号  按照距离从小到大排，构成小根堆</span></span><br><span class="line">        Queue&lt;<span class="type">int</span>[]&gt; heap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((o1, o2) -&gt; o1[<span class="number">0</span>] - o2[<span class="number">0</span>]);</span><br><span class="line">        heap.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, <span class="number">1</span>&#125;);</span><br><span class="line">        <span class="keyword">while</span> (!heap.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span>[] tmp = heap.poll();</span><br><span class="line">            <span class="type">int</span> <span class="variable">distance</span> <span class="operator">=</span> tmp[<span class="number">0</span>], k = tmp[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (tag[k]) <span class="keyword">continue</span>;</span><br><span class="line">            tag[k] = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 更新和此点相关联的点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> h[k]; i != -<span class="number">1</span>; i = ne[i]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> e[i];</span><br><span class="line">                <span class="keyword">if</span> (dist[j] &gt; distance + w[i]) &#123;</span><br><span class="line">                    dist[j] = distance + w[i];</span><br><span class="line">                    <span class="comment">// 更新完后重新入堆</span></span><br><span class="line">                    heap.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;dist[j], j&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dist[n] == max) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> dist[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Bellman-ford算法"><a href="#Bellman-ford算法" class="headerlink" title="Bellman-ford算法"></a>Bellman-ford算法</h3><hr><p><strong>适用于解决单源最短路问题中边权存在负值的情况，且bellman-ford算法保证求出的最短路是在走过的边数不超过一定值的情况</strong></p><hr><p><strong>基本思路：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 初始化dist数组中除1以外的距离为正无穷，1到1的距离为0</span><br><span class="line">2. 进行k次迭代</span><br><span class="line">3. 优先对dist数组作备份，记录上一轮的dist数组</span><br><span class="line">4. 遍历每条边，将距离全部更新</span><br><span class="line">5. 继续k次迭代过程</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义类，作为结构体使用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="type">int</span> a, b, w;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法初始化类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Edge</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> w)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">        <span class="built_in">this</span>.b = b;</span><br><span class="line">        <span class="built_in">this</span>.w = w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">510</span>, M = <span class="number">10010</span>, max = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n, m, k;</span><br><span class="line">    <span class="comment">// 存储每个点到源点1的距离</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] dist = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="comment">// 作为备份数组</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] backcup = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="comment">// 创建边的对象</span></span><br><span class="line">    <span class="keyword">static</span> Edge[] edges = <span class="keyword">new</span> <span class="title class_">Edge</span>[M];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line">        m = sc.nextInt();</span><br><span class="line">        k = sc.nextInt();</span><br><span class="line">        <span class="type">int</span> a, b, w;</span><br><span class="line">        <span class="comment">// 初始化边类</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            a = sc.nextInt();</span><br><span class="line">            b = sc.nextInt();</span><br><span class="line">            w = sc.nextInt();</span><br><span class="line">            edges[i] = <span class="keyword">new</span> <span class="title class_">Edge</span>(a, b, w);</span><br><span class="line">        &#125;</span><br><span class="line">        bellman_ford();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bellman_ford</span><span class="params">()</span> &#123;</span><br><span class="line">        Arrays.fill(dist, max);</span><br><span class="line">        dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 因为走过的边不超过k，所以进行k次迭代</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="comment">// 为了防止串联导致的错误情况，需要先备份数组</span></span><br><span class="line">            backcup = Arrays.copyOf(dist, n + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 遍历每一条边</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> edges[j].a;</span><br><span class="line">                <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> edges[j].b;</span><br><span class="line">                <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> edges[j].w;</span><br><span class="line">                <span class="comment">// 松弛操作</span></span><br><span class="line">                dist[b] = Math.min(dist[b], backcup[a] + w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// max/2原因为：即使没有从1-n的路，但是仍会有节点的负边权更新dist[n]，导致dist[n]值变小一点</span></span><br><span class="line">        <span class="keyword">if</span> (dist[n] &gt; max / <span class="number">2</span>) System.out.print(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.print(dist[n]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="SPFA算法"><a href="#SPFA算法" class="headerlink" title="SPFA算法"></a>SPFA算法</h3><hr><p><strong>适用于单源最短路问题中存在负边权的情况（边权全为正时也可以使用，效率高于Dijkstra算法），但不能保证经过的边数小于一定值，且此算法在图中存在负环时无法使用</strong></p><hr><p><strong>基本思路：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 初始化dist数组，除了1之外的其他点距离为正无穷，1到1的点距离为0</span><br><span class="line">2. 定义一个队列，存储距离发生改变的点的编号，并将编号1的点入队</span><br><span class="line">3. 当队列不空时，弹出队头编号，改变此点状态</span><br><span class="line">4. 遍历此队头连接到的其他点，如果其他的点距离发生改变且不在队中，则此点入队，改变状态</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">100010</span>, max = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n, m;</span><br><span class="line">    <span class="comment">// n=m 稀疏图 邻接表</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] h = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] e = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] ne = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] w = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="comment">// 记录距离</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] dist = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="comment">// 判断节点是否在队列中</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span>[] tag = <span class="keyword">new</span> <span class="title class_">boolean</span>[N];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line">        m = sc.nextInt();</span><br><span class="line">        <span class="type">int</span> x, y, z;</span><br><span class="line">        Arrays.fill(h, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (m-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            x = sc.nextInt();</span><br><span class="line">            y = sc.nextInt();</span><br><span class="line">            z = sc.nextInt();</span><br><span class="line">            add(x, y, z);</span><br><span class="line">        &#125;</span><br><span class="line">        SPFA();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> &#123;</span><br><span class="line">        e[idx] = y;</span><br><span class="line">        w[idx] = z;</span><br><span class="line">        ne[idx] = h[x];</span><br><span class="line">        h[x] = idx++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">SPFA</span><span class="params">()</span> &#123;</span><br><span class="line">        Arrays.fill(dist, max);</span><br><span class="line">        dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 队列存储距离发生改变的节点的编号</span></span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        q.offer(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> q.poll();</span><br><span class="line">            tag[k] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> h[k]; i != -<span class="number">1</span>; i = ne[i]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> e[i];</span><br><span class="line">                <span class="comment">// 如果距离发生改变</span></span><br><span class="line">                <span class="keyword">if</span> (dist[j] &gt; dist[k] + w[i]) &#123;</span><br><span class="line">                    dist[j] = dist[k] + w[i];</span><br><span class="line">                    <span class="comment">// 如果编号未在队列中</span></span><br><span class="line">                    <span class="keyword">if</span> (!tag[j]) &#123;</span><br><span class="line">                        q.offer(j);</span><br><span class="line">                        tag[j] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dist[n] == max) System.out.print(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.print(dist[n]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="SPFA判断负环（负权回路）"><a href="#SPFA判断负环（负权回路）" class="headerlink" title="SPFA判断负环（负权回路）"></a>SPFA判断负环（负权回路）</h3><hr><p><strong>基本思路：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 创建队列，将所有点入队，并改变其状态</span><br><span class="line">2. 进入循环，若队列不空，弹出队首，改变状态</span><br><span class="line">3. 遍历弹出的队首所连接的点，如果这些点距离改变，更新距离，并且更新从起点到此点经过的的边数</span><br><span class="line">4. 若边数&gt;=点数，则出现负环</span><br><span class="line">5. 若所连接的点不在队中，入队并改变状态</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">100010</span>, max = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n, m;</span><br><span class="line">    <span class="comment">// n=m 稀疏图 邻接表</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] h = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] e = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] ne = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] w = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="comment">// 记录距离</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] dist = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="comment">// 判断节点是否在队列中</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span>[] tag = <span class="keyword">new</span> <span class="title class_">boolean</span>[N];</span><br><span class="line">    <span class="comment">// 记录从起点（不一定是1）走到这个点一共经过多少条边</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line">        m = sc.nextInt();</span><br><span class="line">        <span class="type">int</span> x, y, z;</span><br><span class="line">        Arrays.fill(h, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (m-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            x = sc.nextInt();</span><br><span class="line">            y = sc.nextInt();</span><br><span class="line">            z = sc.nextInt();</span><br><span class="line">            add(x, y, z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (SPFA()) System.out.print(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.print(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> &#123;</span><br><span class="line">        e[idx] = y;</span><br><span class="line">        w[idx] = z;</span><br><span class="line">        ne[idx] = h[x];</span><br><span class="line">        h[x] = idx++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">SPFA</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        Arrays.fill(dist, max);</span></span><br><span class="line"><span class="comment">//        dist[1] = 0;</span></span><br><span class="line">        <span class="comment">// 队列存储距离发生改变的节点的编号</span></span><br><span class="line">        <span class="comment">// 因为环的起点不一定是1，所以将所有点都放入队列中</span></span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            q.offer(i);</span><br><span class="line">            tag[i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> q.poll();</span><br><span class="line">            tag[k] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> h[k]; i != -<span class="number">1</span>; i = ne[i]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> e[i];</span><br><span class="line">                <span class="comment">// 如果距离发生改变</span></span><br><span class="line">                <span class="keyword">if</span> (dist[j] &gt; dist[k] + w[i]) &#123;</span><br><span class="line">                    dist[j] = dist[k] + w[i];</span><br><span class="line">                    <span class="comment">// 起点到j的边数更新为起点到k的边数再加一</span></span><br><span class="line">                    cnt[j] = cnt[k] + <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">// n条边代表经过n+1个点，则必有点重复走，所以必有环</span></span><br><span class="line">                    <span class="comment">// 又因为这是最短路问题，如果是正环，不会去走，所以只能为负环</span></span><br><span class="line">                    <span class="keyword">if</span> (cnt[j] &gt;= n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="comment">// 如果编号未在队列中</span></span><br><span class="line">                    <span class="keyword">if</span> (!tag[j]) &#123;</span><br><span class="line">                        q.offer(j);</span><br><span class="line">                        tag[j] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h3><hr><p><strong>适用于多源汇最短路问题：存在负权回路时不可使用，该算法时间复杂度O(n^3)</strong></p><hr><p><strong>基本思路：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 三层循环迭代结束</span><br></pre></td></tr></table></figure><hr><p><strong>注意事项：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 初始化grid数组时先将其中元素填充为max</span><br><span class="line">2. max / 2时不存在通路</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">210</span>, max = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n, m, q;</span><br><span class="line">    <span class="comment">// m==n^2 邻接矩阵存储点到点距离</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[][] dist = <span class="keyword">new</span> <span class="title class_">int</span>[N][N];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line">        m = sc.nextInt();</span><br><span class="line">        q = sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == j) dist[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> dist[i][j] = max;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> a, b, w;</span><br><span class="line">        <span class="keyword">while</span> (m-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            a = sc.nextInt();</span><br><span class="line">            b = sc.nextInt();</span><br><span class="line">            w = sc.nextInt();</span><br><span class="line">            <span class="comment">// 因为是最短路，所以选取最短边权</span></span><br><span class="line">            dist[a][b] = Math.min(dist[a][b], w);</span><br><span class="line">        &#125;</span><br><span class="line">        floyd();</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        <span class="keyword">while</span> (q-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            x = sc.nextInt();</span><br><span class="line">            y = sc.nextInt();</span><br><span class="line">            <span class="comment">// 实际上两个点之间没有通路，但可能会有负权边更新了dist[x][y]，使数据变小，所以&gt;max/2即可</span></span><br><span class="line">            <span class="keyword">if</span> (dist[x][y] &gt; max / <span class="number">2</span>) System.out.println(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> System.out.println(dist[x][y]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">floyd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= n; k++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                    dist[i][j] = Math.min(dist[i][j], dist[i][k] + dist[k][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Template</title>
      <link href="/2023/07/25/Template/"/>
      <url>/2023/07/25/Template/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/07/25/hello-world/"/>
      <url>/2023/07/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
